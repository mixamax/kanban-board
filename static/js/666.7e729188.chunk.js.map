{"version":3,"file":"static/js/666.7e729188.chunk.js","mappings":"gNACA,EAA0C,0CAA1C,EAAwG,oC,qHCUlGA,EAAgB,SAACC,GAAK,OAAKA,EAAMC,YAAa,EAEvCC,EAAuB,SAAHC,GAO1B,IANHC,EAAWD,EAAXC,YACAC,EAAKF,EAALE,MACAC,EAAMH,EAANG,OACAC,EAAWJ,EAAXI,YACAC,EAAWL,EAAXK,YACAC,EAAgBN,EAAhBM,iBAEMC,GAAaC,EAAAA,EAAAA,IAAYZ,GAC/Ba,GAAwCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,IAEpCI,EAAAA,EAAAA,kBAAgB,WACZT,EAAiBH,EACrB,GAAG,CAACA,IAEJ,IAGIa,EAEAC,EALAC,EAAW,GACXC,EAAY,GACZC,EAAY,GAEZC,EAAU,EAEVC,EAAe,GACfC,EAAa,GAmCjB,SAASC,IACL,IAAIC,EAAIC,IAAON,GACXO,EAAID,IAAOE,KAAKC,OAChBC,EAAOH,EAAEI,KAAKN,EAAG,QACrBA,EAAEO,IAAIF,EAAM,QACZ,IAAIG,EAAQN,EAAEI,KAAKN,EAAG,SACtBA,EAAEO,IAAIC,EAAO,SACb,IAAIC,EAAUP,EAAEI,KAAKN,EAAG,WACxBA,EAAEO,IAAIE,EAAS,WACf,IAAIC,EAAUR,EAAEI,KAAKN,EAAG,WAExB,MADO,GAAAW,OAAMN,EAAI,mBAAAM,OAAQH,EAAK,aAAAG,OAAOF,EAAO,yBAAAE,OAASD,EAAO,qBAEhE,CA7CIhC,IACAgB,EAAYZ,EAAWH,GAAaiC,MAAMlC,GAAQgB,UAClDC,EAAYb,EAAWH,GAAaiC,MAAMlC,GAAQiB,UAClDC,EAAUd,EAAWH,GAAaiC,MAAMlC,GAAQkB,QAChDH,EAAWX,EAAWH,GAAaiC,MAAMlC,GAAQe,SACjDK,EAAahB,EAAWH,GAAaiC,MAAMlC,GAAQoB,WACnDP,EAAgB,IAAIY,KAAKR,GAAWkB,eAAe,KAAM,CACrDC,IAAK,UACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,YAIL1B,EADPI,EACqB,IAAIO,KAAKP,GAASiB,eAAe,KAAM,CAClDC,IAAK,UACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,YAEG,sEAGjBrB,EADa,IAAbJ,EACe,uCACK,IAAbA,EACQ,6CAEA,+CAkBvB0B,EAAAA,EAAAA,YAAU,WACN,GAAmB,SAAfrB,EAAJ,CAKA,IAAIsB,EAAMrB,IACJsB,EAAQC,WAAWjC,EAAiB,IAAM+B,GAChD,OAAO,kBAAMG,aAAaF,EAAO,CAHjC,CAHI,IAAID,EAAMrB,IACVV,EAAgB+B,EAMxB,GAAG,CAAChC,EAAcU,IAElB,IAAM0B,EAAQ,CACV,CACIC,IAAK,IACLC,MAAO,mDACPC,SAAUjC,GAGd,CACI+B,IAAK,IACLC,MAAO,4EACPC,SAAUpC,GAGd,CACIkC,IAAK,IACLC,MAAO,kFACPC,SAAUnC,GAGd,CACIiC,IAAK,IACLC,OAAOE,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAACC,OAAO,aAAaC,KAAK,gDACvCJ,SAAUvC,GAEd,CACIqC,IAAK,IACLC,MAAO,yDACPC,SAAU,KAEd,CACIF,IAAK,IACLC,MAAO,yDACPC,SAAU9B,IAGlB,OACImC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACFC,MACe,IAAXxD,EACM,GAAE,GAAAiC,OACC7B,EAAWH,GAAaiC,MAAMlC,GAAQyD,iBAEnDC,UAAQ,EACRC,KAAM7D,EAEN8D,KAAM7D,EACN8D,SAAU9D,EAAMkD,SAAA,EAEhBC,EAAAA,EAAAA,KAACY,EAAAA,EACG,CACAC,UAAQ,EACRjB,MAAOA,EACPkB,OAAQ,EACRC,KAAK,WAGTf,EAAAA,EAAAA,KAACgB,EAAAA,GAAM,CAACD,KAAM,IAAIhB,SAAC,6GACnBC,EAAAA,EAAAA,KAACiB,EAAAA,EAAe,CACZC,QAASlE,EACTmE,MAAM,MACNC,MAAO,CACHC,SAAU,OACVC,UAAW,OACXC,WAAY,OACZC,OAAQ,UACRL,MAAO,WAK3B,E,kGChKaM,EAAkB,SAAH9E,GAIrB,IAHH+E,EAAoB/E,EAApB+E,qBACAC,EAAqBhF,EAArBgF,sBACAC,EAAajF,EAAbiF,cAEMC,GAAaC,EAAAA,EAAAA,MAMnBC,EAAqBC,EAAAA,EAAKC,UAAnBC,GAA4B3E,EAAAA,EAAAA,GAAAwE,EAAA,GAAlB,GAqBjB,OACI/B,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CACFI,KAAMkB,EACNjB,KAAMgB,EACNf,SAAUe,EAAqB3B,UAE/BK,EAAAA,EAAAA,MAAC4B,EAAAA,GAAIG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACDC,UAAU,EACVC,KAAMH,GAlCH,CACXI,SAAU,CAAEC,KAAM,IAClBC,WAAY,CAAED,KAAM,MAiCF,IACVE,KAAK,cACLrB,MAAO,CAAEE,UAAW,QACpBoB,SAhCgB,SAACC,GACzB,IAAMC,EAAcD,EAAOE,QAAQ1C,KAE7B2C,EAAkBlB,EAAcmB,GAChCjG,EAAS8E,EAAc9E,OAEzB8F,GACAf,EAAW,CACPmB,KAAM,aACNC,QAAS,CACLF,GAAG,OAADhE,QAASmE,EAAAA,EAAAA,MACX/C,KAAMyC,EACNO,OAAQL,EACRhG,OAAQA,KAIpBoF,EAAWkB,aACf,EAc0CrD,SAAA,EAE9BC,EAAAA,EAAAA,KAACgC,EAAAA,EAAKqB,KAAI,CACNZ,KAAM,CAAC,UAAW,QAClBa,MAAO,CAAC,CAAEC,UAAU,IAAQxD,UAE5BC,EAAAA,EAAAA,KAACwD,EAAAA,EAAMC,SAAQ,OAEnBzD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAQ,CAAA3D,UACLC,EAAAA,EAAAA,KAACgB,EAAAA,GAAM,CAACgC,KAAK,UAAUW,SAAS,SAAQ5D,SAAC,+HAO7D,EC3DQ6D,EAAkBC,EAAAA,EAAlBD,cAmCFE,EAAmB,SAACtH,GAAK,OAAKA,EAAMuH,eAAgB,EAI7CC,EAAe,SAAHrH,GAA4B,IAyC7CsH,EAXgBzH,EA9BO0H,EAAcvH,EAAduH,eACrBC,GAAgBhH,EAAAA,EAAAA,IAAY2G,GAClC1G,GAA0DC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlEuE,EAAqBrE,EAAA,GAAE8G,EAAwB9G,EAAA,GACtD+G,GAA0ChH,EAAAA,EAAAA,UAAS,IAAGiH,GAAA/G,EAAAA,EAAAA,GAAA8G,EAAA,GAA/CzC,EAAa0C,EAAA,GAAEC,EAAgBD,EAAA,GAChCE,EAAsB,SAACzB,GACzBqB,GAAyB,GACzBG,EAAiBxB,EACrB,EAIM0B,EAAsB,SAAtBA,EAAuBC,EAAWC,GACpC,IAjDMxE,EAAMyE,EAAgB9B,EAiDtB+B,EAAeV,EAAcW,aAAaC,QAC5C,SAACC,GAAM,OAAKb,EAAca,GAAQ7B,SAAWuB,CAAS,IAEpD7E,EAAG,KAAAd,OAAQ4F,GACjB,MAAO,CACHrE,OAtDEH,EAuDEgE,EAAcO,GAAWvE,KAvDrByE,EAwDJJ,EAxDoB1B,EAyDpBqB,EAAcO,IAvDtBtE,EAAAA,EAAAA,MAAA,OAAAL,SAAA,EACIC,EAAAA,EAAAA,KAACiF,EAAAA,EAAI,CACD3E,MAAO,GACPO,UAAU,EACVO,MAAO,CAAE8D,MAAO,IAAK5D,UAAW,QAChC6D,UAAW,CACPC,QAAS,OACTC,SAAU,SACVC,QAAS,QACXvF,UAEFC,EAAAA,EAAAA,KAAA,KACIoB,MAAO,CACHmE,OAAQ,IACRF,SAAU,OACVG,aAAc,cAChBzF,SAEDI,OAGTH,EAAAA,EAAAA,KAACgB,EAAAA,GAAM,CACHE,QAAS,kBAAM0D,EAAe9B,EAAgB,EAC9C1B,MAAO,CAAEE,UAAW,UAAWvB,SAClC,gBAiCDF,IAAKA,EACL4F,MAAMzF,EAAAA,EAAAA,KAAC0F,EAAAA,EAAgB,IACvB3F,UAAW8E,GAAgB,IAAIc,KAAI,SAACjB,EAAWC,GAAK,OAChDF,EAAoBC,EAAU,GAAD3F,OAAK,CAACc,GAAI,KAAAd,OAAI4F,GAAQ,IAG/D,EAkBA,OAJAR,EAAcW,aACPb,GAbazH,EAaS2H,GAZMW,aAAaC,QACxC,SAACL,GAAS,OAAKlI,EAAMkI,GAAW5H,SAAWoH,CAAc,IAEZa,QAC7C,SAACL,GAAS,MAAiC,KAA5BlI,EAAMkI,GAAWvB,MAAa,IAElBwC,KAAI,SAACjB,EAAWC,GAAK,OAChDF,EAAoBC,EAAWC,EAAM,IAMtCV,EAAW,IAGd7D,EAAAA,EAAAA,MAAAwF,EAAAA,SAAA,CAAA7F,SAAA,EACIC,EAAAA,EAAAA,KAAC4D,EAAa,CACViC,YAAY,EACZC,OAAQ,OACRC,SAAS,EACTC,UAAU,EACVC,UAAU,EACVC,kBAAgB,EAChBjC,SAAUA,KAEdjE,EAAAA,EAAAA,KAACyB,EAAe,CACZG,cAAeA,EACfD,sBAAuBA,EACvBD,qBApDiB,WACzB0C,GAAyB,EAC7B,MAsDJ,ECvGa+B,EAAe,SAAHxJ,GAIlB,IAHHyJ,EAAazJ,EAAbyJ,cACAC,EAAY1J,EAAZ0J,aACAnC,EAAcvH,EAAduH,eAEMrC,GAAaC,EAAAA,EAAAA,MAMnBC,EAAkBC,EAAAA,EAAKC,UAAhBqE,GAAyB/I,EAAAA,EAAAA,GAAAwE,EAAA,GAAlB,GAiBd,OACI3B,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACI,KAAM2F,EAAe1F,KAAM2F,EAAc1F,SAAU0F,EAAatG,SAAA,EACnEK,EAAAA,EAAAA,MAAC4B,EAAAA,GAAIG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACDC,UAAU,EACVC,KAAMiE,GA1BH,CACXhE,SAAU,CAAEC,KAAM,IAClBC,WAAY,CAAED,KAAM,MAyBF,IACVE,KAAK,WACLrB,MAAO,CAAEE,UAAW,QACpBoB,SAxBgB,SAACC,GACzB,IAAMC,EAAcD,EAAOE,QAAQ1C,KAC/ByC,GAAesB,GACfrC,EAAW,CACPmB,KAAM,aACNC,QAAS,CACLF,GAAG,OAADhE,QAASmE,EAAAA,EAAAA,MACX/C,KAAMyC,EACNO,OAAQ,GACRrG,OAAQoH,KAIpBoC,EAAQlD,aACZ,EAU0CrD,SAAA,EAE9BC,EAAAA,EAAAA,KAACgC,EAAAA,EAAKqB,KAAI,CACNZ,KAAM,CAAC,UAAW,QAClBa,MAAO,CAAC,CAAEC,UAAU,IAAQxD,UAE5BC,EAAAA,EAAAA,KAACwD,EAAAA,EAAMC,SAAQ,OAEnBzD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAQ,CAAA3D,UACLC,EAAAA,EAAAA,KAACgB,EAAAA,GAAM,CAACgC,KAAK,UAAUW,SAAS,SAAQ5D,SAAC,+HAMjDC,EAAAA,EAAAA,KAACgE,EAAY,CAACE,eAAgBA,MAG1C,ECqDA,EArGkB,WACd,IAAQnH,GAAgBwJ,EAAAA,EAAAA,MAAhBxJ,YACRK,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CoJ,EAASlJ,EAAA,GAAEmJ,EAAYnJ,EAAA,GAC9B+G,GACIhH,EAAAA,EAAAA,WAAS,GAAMiH,GAAA/G,EAAAA,EAAAA,GAAA8G,EAAA,GADZqC,EAAwBpC,EAAA,GAAEqC,EAA2BrC,EAAA,GAE5DsC,GAAsCvJ,EAAAA,EAAAA,WAAS,GAAMwJ,GAAAtJ,EAAAA,EAAAA,GAAAqJ,EAAA,GAA9CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,GAA4C3J,EAAAA,EAAAA,UAAS,IAAG4J,GAAA1J,EAAAA,EAAAA,GAAAyJ,EAAA,GAAjD9C,EAAc+C,EAAA,GAAEC,EAAiBD,EAAA,GAClCE,GAAYC,EAAAA,EAAAA,QAAO,GAYnBpK,EAAc,WAChB+J,GAAe,EACnB,EASA,OACI3G,EAAAA,EAAAA,MAACiH,EAAAA,GAAO,CACJjG,MAAO,CACH0E,OAAQ,OACRwB,UAAW,OACXpC,MAAO,OACPE,QAAS,OACTmC,cAAe,SACfC,WAAY,SACZC,SAAU,YACZ1H,SAAA,EAEFC,EAAAA,EAAAA,KAAC0H,EAAAA,GAAI,CAACC,GAAG,IAAG5H,UACRC,EAAAA,EAAAA,KAAC4H,EAAAA,EAAgB,CACb9B,OAAQ,OACR1E,MAAO,CACHqG,SAAU,WACVI,KAAM,SACNC,IAAK,SACLzG,SAAU,aAKtBrB,EAAAA,EAAAA,KAACgB,EAAAA,GAAM,CACHE,QAAS,kBAAMuF,GAAa,EAAK,EACjCzD,KAAK,UACL+E,MAAM,SACNtC,MAAMzF,EAAAA,EAAAA,KAACgI,EAAAA,EAAY,IACnBjH,KAAK,QACLK,MAAO,CACHE,UAAW,OACX2G,UAAW,sCACXC,gBAAiB,YAGzB9H,EAAAA,EAAAA,MAAA,OAAK+H,UAAWC,EAAkCrI,SAAA,EAC9CC,EAAAA,EAAAA,KAAA,QAAMmI,UAAWC,EAA4BrI,SAAC,WAC9CC,EAAAA,EAAAA,KAAA,QAAMmI,UAAWC,EAA4BrI,SAAC,iBAC9CC,EAAAA,EAAAA,KAAA,QAAMmI,UAAWC,EAA4BrI,SAAC,aAElDC,EAAAA,EAAAA,KAACqI,EAAAA,GAAc,CACXtL,YAAaA,EACbuL,4BAhDwB,SAACxL,GACjCqK,EAAUoB,QAAUzL,EACpB6J,GAA4B,EAChC,KA+CQ3G,EAAAA,EAAAA,KAACwI,EAAAA,GAAS,CACN5L,YAAa4J,EACb3J,MAhEK,WACb4J,GAAa,EACjB,EA+DY1J,YAAaA,KAEjBiD,EAAAA,EAAAA,KAACtD,EAAoB,CACjBE,YAAa8J,EACb7J,MA5DyB,WACjC8J,GAA4B,EAChC,EA4DY7J,OAAQqK,EAAUoB,QAClBxL,YAAaA,EACbC,YAAaA,EACbC,iBA9Ea,SAACwL,GACtBvB,EAAkBuB,EACtB,KA8EQzI,EAAAA,EAAAA,KAACmG,EAAY,CACTC,cAAeU,EACfT,aA3ES,WACjBU,GAAe,EACnB,EA0EY/J,YAAaA,EACbkH,eAAgBA,MAMhC,C,gKC5GawE,EAAc,SAAH/L,GAAyC,IAAnC8F,EAAI9F,EAAJ8F,KAAMkG,EAAWhM,EAAXgM,YAAaC,EAAQjM,EAARiM,SAC7C,OACI5I,EAAAA,EAAAA,KAAC0H,EAAAA,GAAI,CAACC,GAAE,SAAA5I,OAAW6J,GAAW7I,UAC1BC,EAAAA,EAAAA,KAACiF,EAAAA,EAAI,CACD4D,WAAW,EACXvI,MAAOmC,EACP5B,UAAU,EACVO,MAAO,CAAE8D,MAAO,KAChBC,UAAW,CACPC,QAAS,OACTC,SAAU,SACVC,QAAS,OACTgC,UAAW,OACXwB,UAAW,QACb/I,UAEFC,EAAAA,EAAAA,KAAA,KACIoB,MAAO,CACHmE,OAAQ,IACRF,SAAU,OACVG,aAAc,cAChBzF,SAED4I,OAKrB,E,2DC3BaI,EAAe,SAAHpM,GAAgC,IAA1BC,EAAWD,EAAXC,YAAaC,EAAKF,EAALE,MACxCkF,EAAeC,EAAAA,EAAKC,UAAbI,GAAsB9E,EAAAA,EAAAA,GAAAwE,EAAA,GAAlB,GACLiH,GAAalH,EAAAA,EAAAA,MACbmH,GAAkBnH,EAAAA,EAAAA,MAmCxB,OACI9B,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CACFC,MAAM,+IACNE,UAAQ,EACRC,KAAM7D,EACN8D,KAAM2B,EAAK6G,OACXvI,SAXmB,WACvB0B,EAAKe,cACLvG,GACJ,EAQqCkD,UAE7BK,EAAAA,EAAAA,MAAC4B,EAAAA,GAAIG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACDC,UAAU,EACVC,KAAMA,GA3CH,CACXC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,MA0CF,IACVE,KAAK,UACLrB,MAAO,CAAE+H,SAAU,KACnBC,iBAzCa,CACrB7F,SAAU,yBAyCFb,SArCkB,SAACC,GAC3B,IAAA0G,EAA0D1G,EAAlD2G,QAAOC,OAAA,IAAAF,EAAoC,CAAC,EAACA,EAAAG,EAAAD,EAAlC9G,KAAAA,OAAI,IAAA+G,EAAG,GAAEA,EAAAC,EAAAF,EAAEZ,YAC9BK,EAAW,CACPhG,KAAM,aACNC,QAAS,CACLlG,YAAa0F,EACbiH,wBALiC,IAAAD,EAAG,GAAEA,KAQ9CR,EAAgB,CACZjG,KAAM,kBACNC,QAAS,CACLlG,YAAa0F,KAGrB5F,GACJ,EAqB4CkD,SAAA,EAEhCC,EAAAA,EAAAA,KAACgC,EAAAA,EAAKqB,KAAI,CACNZ,KAAM,CAAC,UAAW,QAClB3C,MAAM,mDACNwD,MAAO,CAAC,CAAEC,UAAU,IAAQxD,UAE5BC,EAAAA,EAAAA,KAACwD,EAAAA,EAAK,OAGVxD,EAAAA,EAAAA,KAACgC,EAAAA,EAAKqB,KAAI,CACNZ,KAAM,CAAC,UAAW,eAClB3C,MAAM,8FAAkBC,UAExBC,EAAAA,EAAAA,KAACwD,EAAAA,EAAMC,SAAQ,WAKnC,EC3EA,EAAoC,0CAApC,EAA4F,oCCA5F,EAA4B,wBAA5B,EAAiE,yBAAjE,EAAuG,yB,oBCG1FkG,EAAO,SAAHhN,GAQV,IAgBCiN,EAvBJ7G,EAAEpG,EAAFoG,GACAzC,EAAK3D,EAAL2D,MACAuJ,EAAKlN,EAALkN,MACAC,EAAQnN,EAARmN,SACAjM,EAAQlB,EAARkB,SACAG,EAAOrB,EAAPqB,QACAsK,EAA2B3L,EAA3B2L,4BAEAyB,GACIC,EAAAA,EAAAA,IAAY,CAAEjH,GAAIA,IADdkH,EAAUF,EAAVE,WAAYC,EAASH,EAATG,UAAWC,EAAUJ,EAAVI,WAAYC,EAASL,EAATK,UAAWC,EAAUN,EAAVM,WAGhDjJ,EAAQ,CACVgJ,UAAWE,EAAAA,GAAIC,UAAUC,SAASJ,GAClCC,WAAAA,GAEEI,EAAkB,IAAIlM,KAAKsL,GAAO5K,eAAe,KAAM,CACzDC,IAAK,UACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,YAINtB,IACF4L,EAAgB,IAAIrL,KAAKP,GAASiB,eAAe,KAAM,CACnDC,IAAK,UACLC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,aAGhB,IAAM8F,EAAUrC,IAAO+G,EAavB,OACI1J,EAAAA,EAAAA,MAAA,OAAKgB,MAAO,CAAEsJ,YAAa,QAAS3K,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAAmC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACIwI,IAAKR,EACL/I,MAAOA,GACH6I,GACAC,GAAS,IAAAnK,UAGbK,EAAAA,EAAAA,MAAA,OACIc,QAASoH,EACTH,UAAS,GAAApJ,OAAKqJ,GACdwC,OAAQxF,EACRhE,MAAO,CAAE8G,gBAzBzB,SAAkBrK,GACd,OAAiB,IAAbA,EACO,mBACa,IAAbA,EACA,mBACa,IAAbA,EACA,wBAEA,0BAEf,CAe0CgN,CAAShN,IAAYkC,SAAA,EAE/CC,EAAAA,EAAAA,KAAA,QAAMmI,UAAWC,EAAqBrI,SAAEO,KAExCN,EAAAA,EAAAA,KAAA,QACImI,UAAWC,EAAqBrI,SAAA,yCAAAhB,OACvB0L,MACbzK,EAAAA,EAAAA,KAAA,QAAMmI,UAAWC,EAAqBrI,SAC/B/B,EAAO,2DAAAe,OACU6K,GAAa,+EAK7C5J,EAAAA,EAAAA,KAAA,OACIoB,MAAO,CACH0J,OAAQ,IACR5F,MAAO,OACP6F,WAAY,OACZjF,OAAQ,SACRkF,SAAU,6CACVC,YAAa,SACb9J,MAAO,QACPK,OAAQ,WAEZN,QAAS,kBAAMoH,EAA4BvF,EAAG,EAAChD,SAClD,iDAKb,E,6BCpEMxD,EAAgB,SAACC,GAAK,OAAKA,EAAMC,YAAa,EAEvC4L,EAAiB,SAAH1L,GAGpB,IAFHI,EAAWJ,EAAXI,YACAuL,EAA2B3L,EAA3B2L,4BAGM1I,GADazC,EAAAA,EAAAA,IAAYZ,GACNQ,GAEzBK,GAAgCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvC0M,EAAQxM,EAAA,GAAE4N,EAAW5N,EAAA,GAEtB6N,GAAcrJ,EAAAA,EAAAA,MAEdsJ,GAAUC,EAAAA,EAAAA,KACZC,EAAAA,EAAAA,IAAUC,EAAAA,GAAa,CAEnBC,qBAAsB,CAClBC,MAAO,IACPC,UAAW,MAGnBJ,EAAAA,EAAAA,IAAUK,EAAAA,KACVL,EAAAA,EAAAA,IAAUM,EAAAA,GAAgB,CACtBC,iBAAkBC,EAAAA,MAI1B,SAASC,EAAiBC,GACtB,OAAOpM,EAAMZ,MAAMgN,GAAY9N,UACnC,CAiGA,SAAS+N,EAAuBC,GAAe,IAADC,EAE1C,OAD+B,OAALvM,QAAK,IAALA,GAA4B,QAAvBuM,EAALvM,EAAOwM,QAAQF,UAAa,IAAAC,OAAvB,EAALA,EAA8BnN,QAAS,EAErE,CAEA,OACIgB,EAAAA,EAAAA,KAACqM,EAAAA,GAAU,CACPjB,QAASA,EACTkB,mBAAoBC,EAAAA,GACpBC,UAzGR,SAAuBC,GACnB,IAAQC,EAAiBD,EAAjBC,OAAQC,EAASF,EAATE,KAEhB,GAAgB,SAAZA,EAAK5J,IAA6B,YAAZ4J,EAAK5J,IAAgC,SAAZ4J,EAAK5J,GAAe,CACnE,IAAM6J,EAAWC,KAAKC,MAAMD,KAAKE,UAAUnN,IACrCoN,EAAqBL,EAAK5J,GAC1BiJ,EAAaU,EAAO3J,GAEpBkK,EAAwBlB,EAAiBC,GAsB/C,OArBAY,EAASR,QAAQa,GAAuBjO,MAAQ4N,EAASR,QACrDa,GACFjO,MAAM+F,QAAO,SAACtC,GAAI,OAAKA,IAASuJ,CAAU,IAE5CY,EAASR,QAAQY,GAAoBhO,MAAMkO,KAAKlB,GAEhDY,EAAS5N,MAAMgN,GAAY9N,WAAa8O,EAGpCJ,EAAS5N,MAAMgN,GAAYhO,QADJ,SAAvBgP,EACqC,IAAIzO,KAEJ,QAEzC4M,EAAY,CACRnI,KAAM,cACNC,QAAS,CACLlG,YAAAA,EACA6P,SAAAA,IAKZ,CACA,GACID,EAAK5J,KAAO2J,EAAO3J,IACnBnD,EAAMZ,MAAM2N,EAAK5J,IAAI7E,aACjB0B,EAAMZ,MAAM0N,EAAO3J,IAAI7E,WAC7B,CACE,IAAM0O,EAAWC,KAAKC,MAAMD,KAAKE,UAAUnN,IACrCoN,EAAqBjB,EAAiBY,EAAK5J,IAC3CiJ,EAAaU,EAAO3J,GAEpBkK,EAAwBlB,EAAiBC,GAgB/C,OAfAY,EAASR,QAAQa,GAAuBjO,MAAQ4N,EAASR,QACrDa,GACFjO,MAAM+F,QAAO,SAACtC,GAAI,OAAKA,IAASuJ,CAAU,IAE5CY,EAASR,QAAQY,GAAoBhO,MAAMkO,KAAKlB,GAEhDY,EAAS5N,MAAMgN,GAAY9N,WAAa8O,OACxC7B,EAAY,CACRnI,KAAM,cACNC,QAAS,CACLlG,YAAAA,EACA6P,SAAAA,IAKZ,CACA,GACID,EAAK5J,KAAO2J,EAAO3J,IACnBnD,EAAMZ,MAAM2N,EAAK5J,IAAI7E,aACjB0B,EAAMZ,MAAM0N,EAAO3J,IAAI7E,WAC7B,CACE,IAAM0O,EAAWC,KAAKC,MAAMD,KAAKE,UAAUnN,IACrCuN,EAAmBT,EAAO3J,GAC1BqK,EAAiBT,EAAK5J,GACtBmJ,EAAeH,EAAiBoB,GAChCE,EAAWT,EAASR,QAAQF,GAAclN,MAAMsO,WAClD,SAAC7E,GAAK,OAAKA,IAAU2E,CAAc,IAEjCG,EAAWX,EAASR,QAAQF,GAAclN,MAAMsO,WAClD,SAAC7E,GAAK,OAAKA,IAAU0E,CAAgB,IAEnCK,GAAWC,EAAAA,EAAAA,IACbb,EAASR,QAAQF,GAAclN,MAC/BuO,EACAF,GAWJ,OATAT,EAASR,QAAQF,GAAclN,MAAQwO,OACvCrC,EAAY,CACRnI,KAAM,cACNC,QAAS,CACLlG,YAAAA,EACA6P,SAAAA,IAKZ,CACJ,EAgBQc,YAfR,SAAyBjB,GACrB,IAAQC,EAAWD,EAAXC,OACRxB,EAAYwB,EAAO3J,GACvB,EAcQhD,UAEAK,EAAAA,EAAAA,MAAA,OAAK+H,UAAWC,EAA4BrI,SAAA,EACxCC,EAAAA,EAAAA,KAAA,OAAKmI,UAAWC,EAAsBrI,UAClCC,EAAAA,EAAAA,KAAC2N,EAAAA,GAAe,CACZ/N,MAAOqM,EAAuB,QAC9B2B,SAAUC,EAAAA,GAA4B9N,UAEtCC,EAAAA,EAAAA,KAAC8N,EAAS,CAAC/K,GAAI,OAAOhD,SACjBkM,EAAuB,QAAQtG,KAAI,SAAClD,GAAI,OACrCzC,EAAAA,EAAAA,KAAC2J,EAAI,CAED5G,GAAInD,EAAMZ,MAAMyD,GAAMM,GACtBzC,MAAOV,EAAMZ,MAAMyD,GAAM3E,UACzB+L,MAAOjK,EAAMZ,MAAMyD,GAAM1E,UACzB+L,SAAUA,EACVjM,SAAU+B,EAAMZ,MAAMyD,GAAM5E,SAC5BG,QAAS4B,EAAMZ,MAAMyD,GAAMzE,QAC3BsK,4BACIA,GARC1I,EAAMZ,MAAMyD,GAAMM,GAUzB,WAKlB/C,EAAAA,EAAAA,KAAA,OAAKmI,UAAWC,EAAsBrI,UAClCC,EAAAA,EAAAA,KAAC2N,EAAAA,GAAe,CACZ/N,MAAOqM,EAAuB,WAC9B2B,SAAUC,EAAAA,GAA4B9N,UAEtCC,EAAAA,EAAAA,KAAC8N,EAAS,CAAC/K,GAAI,UAAUhD,SACpBkM,EAAuB,WAAWtG,KAAI,SAAClD,GAAI,OACxCzC,EAAAA,EAAAA,KAAC2J,EAAI,CAED5G,GAAInD,EAAMZ,MAAMyD,GAAMM,GACtBzC,MAAOV,EAAMZ,MAAMyD,GAAM3E,UACzB+L,MAAOjK,EAAMZ,MAAMyD,GAAM1E,UACzB+L,SAAUA,EACVjM,SAAU+B,EAAMZ,MAAMyD,GAAM5E,SAC5BG,QAAS4B,EAAMZ,MAAMyD,GAAMzE,QAC3BsK,4BACIA,GARC1I,EAAMZ,MAAMyD,GAAMM,GAUzB,WAKlB3C,EAAAA,EAAAA,MAAA,OAAK+H,UAAWC,EAAsBrI,SAAA,EAClCC,EAAAA,EAAAA,KAAC2N,EAAAA,GAAe,CACZ/N,MAAOqM,EAAuB,QAC9B2B,SAAUC,EAAAA,GAA4B9N,UAEtCC,EAAAA,EAAAA,KAAC8N,EAAS,CAAC/K,GAAI,OAAOhD,SACjBkM,EAAuB,QAAQtG,KAAI,SAAClD,GAAI,OACrCzC,EAAAA,EAAAA,KAAC2J,EAAI,CAED5G,GAAInD,EAAMZ,MAAMyD,GAAMM,GACtBzC,MAAOV,EAAMZ,MAAMyD,GAAM3E,UACzB+L,MAAOjK,EAAMZ,MAAMyD,GAAM1E,UACzB+L,SAAUA,EACVjM,SAAU+B,EAAMZ,MAAMyD,GAAM5E,SAC5BG,QAAS4B,EAAMZ,MAAMyD,GAAMzE,QAC3BsK,4BACIA,GARC1I,EAAMZ,MAAMyD,GAAMM,GAUzB,SAId/C,EAAAA,EAAAA,KAAC+N,EAAAA,GAAW,CAAAhO,SACP+J,GACG9J,EAAAA,EAAAA,KAAC2J,EAAI,CACD5G,GAAI+G,EACJxJ,MAAOV,EAAMZ,MAAM8K,GAAUxJ,MAC7BuJ,MAAOjK,EAAMZ,MAAM8K,GAAUD,QAEjC,cAM5B,EAEA,SAASiE,EAASE,GAAoB,IAAjBjL,EAAEiL,EAAFjL,GAAIhD,EAAQiO,EAARjO,SACboK,GAAe8D,EAAAA,EAAAA,IAAa,CAChClL,GAAIA,IADAoH,WAIR,OAAOnK,EAAAA,EAAAA,KAAA,OAAK2K,IAAKR,EAAWpK,SAAEA,GAClC,C,gEC3PayI,EAAY,SAAH7L,GAA6C,IAAvCC,EAAWD,EAAXC,YAAaC,EAAKF,EAALE,MAAOE,EAAWJ,EAAXI,YAC5CgF,EAAeC,EAAAA,EAAKC,UAAbI,GAAsB9E,EAAAA,EAAAA,GAAAwE,EAAA,GAAlB,GACX3E,GAA0BC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9BqL,EAAKnL,EAAA,GAAE4Q,EAAQ5Q,EAAA,GAMhB6Q,GAAUrM,EAAAA,EAAAA,MAGVsM,EAAW,CACb3L,KAAM,OACN4L,OAAQ,+DACRC,QAAS,CACLC,cAAe,sBAEnBC,SAAQ,SAACC,GACoB,cAArBA,EAAKC,KAAKxO,QACVyO,QAAQC,IAAIH,EAAKC,KAAMD,EAAKI,UAEP,SAArBJ,EAAKC,KAAKxO,OACV4O,EAAAA,GAAQC,QAAQ,GAADhQ,OAAI0P,EAAKC,KAAKjM,KAAI,gCACL,UAArBgM,EAAKC,KAAKxO,QACjB4O,EAAAA,GAAQE,MAAM,GAADjQ,OAAI0P,EAAKC,KAAKjM,KAAI,wBAEvC,GAoDJ,OACIzC,EAAAA,EAAAA,KAACK,EAAAA,EAAK,CACFC,MAAM,mIACNE,UAAQ,EACRC,KAAM7D,EACN8D,KAAM2B,EAAK6G,OAEXvI,SArCmB,WACvB0B,EAAKe,cACL8K,EAAS,GACTrR,GACJ,EAiCqCkD,UAE7BK,EAAAA,EAAAA,MAAC4B,EAAAA,GAAIG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACDC,UAAU,EACVC,KAAMA,GA3DH,CACXC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,MA0DF,IACVE,KAAK,OACLrB,MAAO,CAAE+H,SAAU,KACnBC,iBAzDa,CACrB7F,SAAU,wBACV0L,MAAO,CACHC,MAAO,iCACPC,OAAQ,mCAEZA,OAAQ,CACJC,MAAO,+CAmDH1M,SAzCkB,SAACC,GAC3B,IAAA0M,EAAuD1M,EAA/C2M,KAAIC,OAAA,IAAAF,EAAoC,CAAC,EAACA,EAAAG,EAAAD,EAAlC9M,KAAAA,OAAI,IAAA+M,EAAG,GAAEA,EAAAC,EAAAF,EAAE5G,YAAAA,OAAW,IAAA8G,EAAG,GAAEA,EAE3CtB,EAAQ,CACJnL,KAAM,UACNC,QAAS,CACLlG,YAAAA,EACA2S,SAAS,QAAD3Q,QAAUmE,EAAAA,EAAAA,MAClBpF,UAAW2E,EACXlC,gBAAiBoI,EACjB5K,UAAW,IAAIQ,KACfV,SAAU4K,GAAS,EACnBzK,QAAS,GACT2R,SAAU,GACVC,QAAS,CAAC,EACVC,MAAO,CAAC,EACRC,SAAU,CAAC,KAInBjT,IACAwF,EAAKe,cACL8K,EAAS,EACb,EAkB4CnO,SAAA,EAEhCC,EAAAA,EAAAA,KAACgC,EAAAA,EAAKqB,KAAI,CACNZ,KAAM,CAAC,OAAQ,QACf3C,MAAM,mDACNwD,MAAO,CAAC,CAAEC,UAAU,IAAQxD,UAE5BC,EAAAA,EAAAA,KAACwD,EAAAA,EAAK,OAEVxD,EAAAA,EAAAA,KAACgC,EAAAA,EAAKqB,KAAI,CAACZ,KAAM,CAAC,OAAQ,eAAgB3C,MAAM,mDAAUC,UACtDC,EAAAA,EAAAA,KAACwD,EAAAA,EAAMC,SAAQ,OAEnBzD,EAAAA,EAAAA,KAACgC,EAAAA,EAAKqB,KAAI,CAAAtD,UACNK,EAAAA,EAAAA,MAAA,OAAKgB,MAAO,CAAEmE,OAAQ,QAASxF,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,QAAMoB,MAAO,CAAEmE,OAAQ,QAASxF,SAAC,8DACjCK,EAAAA,EAAAA,MAAC2P,EAAAA,GAAAA,MAAW,CACRvB,SA1GF,SAAC/B,GACnByB,EAASzB,EAAMuD,OAAOvH,MAC1B,EAyGwBhG,KAAK,aACLgG,MAAOA,EAAM1I,SAAA,EAEbC,EAAAA,EAAAA,KAAC+P,EAAAA,GAAK,CAACtH,MAAO,EAAE1I,SAAC,0CACjBC,EAAAA,EAAAA,KAAC+P,EAAAA,GAAK,CAACtH,MAAO,EAAE1I,SAAC,gDACjBC,EAAAA,EAAAA,KAAC+P,EAAAA,GAAK,CAACtH,MAAO,EAAE1I,SAAC,wDAK7BC,EAAAA,EAAAA,KAACiQ,EAAAA,GAAM9N,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKiM,GAAQ,IAAArO,UAChBC,EAAAA,EAAAA,KAACgB,EAAAA,GAAM,CAACyE,MAAMzF,EAAAA,EAAAA,KAACkQ,EAAAA,EAAc,IAAInQ,SAAC,4BAKtD,C","sources":["webpack://project_planner/./src/2_pages/tasks_page/TaskPage.module.css?d526","5_entities/taskDescription_modal/TaskDescriptionModal.jsx","5_entities/subcomment_modal/SubCommentModal.jsx","5_entities/comments_list/CommentsList.jsx","5_entities/comment_modal/CommentModal.jsx","2_pages/tasks_page/TasksPage.jsx","5_entities/project_card/ProjectCard.js","5_entities/project_modal/ProjectModal.js","webpack://project_planner/./src/5_entities/tasks_container/tasksContainer.module.css?f61e","webpack://project_planner/./src/5_entities/task/task.module.css?4989","5_entities/task/Task.jsx","5_entities/tasks_container/TasksContainer.jsx","5_entities/task_modal/TaskModal.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"names-cont-tasks-column\":\"TaskPage_names-cont-tasks-column__YhVrS\",\"name-tasks-column\":\"TaskPage_name-tasks-column__HVl12\"};","import { Modal, Button } from \"antd\";\r\nimport { Badge, Descriptions } from \"antd\";\r\nimport { CommentOutlined } from \"@ant-design/icons\";\r\nimport { useSelector } from \"react-redux/es/hooks/useSelector\";\r\nimport { useEffect, useLayoutEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\n\r\n// import { UploadOutlined } from \"@ant-design/icons\";\r\n// import { useDispatch } from \"react-redux\";\r\n// import { useState } from \"react\";\r\n// import { v4 as uuidv4 } from \"uuid\";\r\nconst getItemsState = (state) => state.reduserTascs;\r\n\r\nexport const TaskDescriptionModal = ({\r\n    isModalOpen,\r\n    close,\r\n    taskId,\r\n    projectName,\r\n    openComment,\r\n    chooseActiveTask,\r\n}) => {\r\n    const tasksState = useSelector(getItemsState);\r\n    const [durationDate, setDurationDate] = useState(\"\");\r\n\r\n    useLayoutEffect(() => {\r\n        chooseActiveTask(taskId);\r\n    }, [taskId]);\r\n\r\n    let priority = \"\",\r\n        taskTitle = \"\",\r\n        startDate = \"\",\r\n        normStartDate,\r\n        endDate = 0,\r\n        normEndDate,\r\n        priorityText = \"\",\r\n        columnName = \"\";\r\n\r\n    if (taskId) {\r\n        taskTitle = tasksState[projectName].tasks[taskId].taskTitle;\r\n        startDate = tasksState[projectName].tasks[taskId].startDate;\r\n        endDate = tasksState[projectName].tasks[taskId].endDate;\r\n        priority = tasksState[projectName].tasks[taskId].priority;\r\n        columnName = tasksState[projectName].tasks[taskId].columnName;\r\n        normStartDate = new Date(startDate).toLocaleString(\"ru\", {\r\n            day: \"numeric\",\r\n            month: \"numeric\",\r\n            year: \"numeric\",\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n        });\r\n\r\n        endDate\r\n            ? (normEndDate = new Date(endDate).toLocaleString(\"ru\", {\r\n                  day: \"numeric\",\r\n                  month: \"numeric\",\r\n                  year: \"numeric\",\r\n                  hour: \"numeric\",\r\n                  minute: \"numeric\",\r\n              }))\r\n            : (normEndDate = \"не завершена\");\r\n\r\n        if (priority === 1) {\r\n            priorityText = \"низкий\";\r\n        } else if (priority === 2) {\r\n            priorityText = \"средний\";\r\n        } else {\r\n            priorityText = \"высокий\";\r\n        }\r\n    }\r\n\r\n    function getDuration() {\r\n        let a = moment(startDate);\r\n        let b = moment(Date.now());\r\n        let days = b.diff(a, \"days\");\r\n        a.add(days, \"days\");\r\n        let hours = b.diff(a, \"hours\");\r\n        a.add(hours, \"hours\");\r\n        let minutes = b.diff(a, \"minutes\");\r\n        a.add(minutes, \"minutes\");\r\n        let seconds = b.diff(a, \"seconds\");\r\n        let dur = `${days} дн, ${hours} ч, ${minutes} мин, ${seconds}сек`;\r\n        return dur;\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (columnName === \"Done\") {\r\n            let dur = getDuration();\r\n            setDurationDate(dur);\r\n            return;\r\n        }\r\n        let dur = getDuration();\r\n        const timer = setTimeout(setDurationDate, 1000, dur);\r\n        return () => clearTimeout(timer);\r\n    }, [durationDate, columnName]);\r\n\r\n    const items = [\r\n        {\r\n            key: \"1\",\r\n            label: \"Описание\",\r\n            children: taskTitle,\r\n            // span: 1,\r\n        },\r\n        {\r\n            key: \"2\",\r\n            label: \"Дата создания\",\r\n            children: normStartDate,\r\n            // span: 2,\r\n        },\r\n        {\r\n            key: \"3\",\r\n            label: \"Дата окончания\",\r\n            children: normEndDate,\r\n            // span: 3,\r\n        },\r\n        {\r\n            key: \"4\",\r\n            label: <Badge status=\"processing\" text=\"В работе\" />,\r\n            children: durationDate,\r\n        },\r\n        {\r\n            key: \"5\",\r\n            label: \"Подзадачи\",\r\n            children: \"3\",\r\n        },\r\n        {\r\n            key: \"6\",\r\n            label: \"Приоритет\",\r\n            children: priorityText,\r\n        },\r\n    ];\r\n    return (\r\n        <Modal\r\n            title={\r\n                taskId === 0\r\n                    ? \"\"\r\n                    : `${tasksState[projectName].tasks[taskId].taskDescription}`\r\n            }\r\n            centered\r\n            open={isModalOpen}\r\n            // onOk={form.submit}\r\n            onOk={close}\r\n            onCancel={close}\r\n        >\r\n            <Descriptions\r\n                // title=\"User Info\"\r\n                bordered\r\n                items={items}\r\n                column={1}\r\n                size=\"small\"\r\n            />\r\n\r\n            <Button size={\"m\"}>добавить подзадачу</Button>\r\n            <CommentOutlined\r\n                onClick={openComment}\r\n                color=\"red\"\r\n                style={{\r\n                    fontSize: \"200%\",\r\n                    marginTop: \"1rem\",\r\n                    marginLeft: \"1rem\",\r\n                    cursor: \"pointer\",\r\n                    color: \"red\",\r\n                }}\r\n            />\r\n        </Modal>\r\n    );\r\n};\r\n","import { Modal, Button, Input, Form } from \"antd\";\r\nimport FormItem from \"antd/es/form/FormItem\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport const SubCommentModal = ({\r\n    closeSubCommentInput,\r\n    isSubCommentInputOpen,\r\n    parentComment,\r\n}) => {\r\n    const addComment = useDispatch();\r\n    const layout = {\r\n        labelCol: { span: 10 },\r\n        wrapperCol: { span: 50 },\r\n    };\r\n\r\n    const [formSubCom] = Form.useForm();\r\n    const dispatchValueofForm = (values) => {\r\n        const commentText = values.comment.text;\r\n\r\n        const parentCommentId = parentComment.id;\r\n        const taskId = parentComment.taskId;\r\n\r\n        if (commentText) {\r\n            addComment({\r\n                type: \"addComment\",\r\n                payload: {\r\n                    id: `com-${uuidv4()}`,\r\n                    text: commentText,\r\n                    parent: parentCommentId,\r\n                    taskId: taskId,\r\n                },\r\n            });\r\n        }\r\n        formSubCom.resetFields();\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            open={isSubCommentInputOpen}\r\n            onOk={closeSubCommentInput}\r\n            onCancel={closeSubCommentInput}\r\n        >\r\n            <Form\r\n                preserve={false}\r\n                form={formSubCom}\r\n                {...layout}\r\n                name=\"sub-comment\"\r\n                style={{ marginTop: \"2rem\" }}\r\n                onFinish={dispatchValueofForm}\r\n            >\r\n                <Form.Item\r\n                    name={[\"comment\", \"text\"]}\r\n                    rules={[{ required: true }]}\r\n                >\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n                <FormItem>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        добавить комментарий\r\n                    </Button>\r\n                </FormItem>\r\n            </Form>\r\n        </Modal>\r\n    );\r\n};\r\n","import { CarryOutOutlined } from \"@ant-design/icons\";\r\nimport { Tree, Button, Card } from \"antd\";\r\nimport { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { SubCommentModal } from \"../subcomment_modal/SubCommentModal\";\r\n\r\nconst { DirectoryTree } = Tree;\r\n\r\nconst card = (text, openSubComment, parentCommentId) => {\r\n    return (\r\n        <div>\r\n            <Card\r\n                title={\"\"}\r\n                bordered={false}\r\n                style={{ width: 250, marginTop: \"1rem\" }}\r\n                bodyStyle={{\r\n                    display: \"flex\",\r\n                    overflow: \"hidden\",\r\n                    padding: \"1rem\",\r\n                }}\r\n            >\r\n                <p\r\n                    style={{\r\n                        margin: \"0\",\r\n                        overflow: \"auto\",\r\n                        overflowWrap: \"break-word\",\r\n                    }}\r\n                >\r\n                    {text}\r\n                </p>\r\n            </Card>\r\n            <Button\r\n                onClick={() => openSubComment(parentCommentId)}\r\n                style={{ marginTop: \"0.4rem\" }}\r\n            >\r\n                comment\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst getCommentsState = (state) => state.reduserComments;\r\n\r\n//************************************************************* */\r\n\r\nexport const CommentsList = ({ selectedTaskId }) => {\r\n    const commentsState = useSelector(getCommentsState);\r\n    const [isSubCommentInputOpen, setIsSubCommentInputOpen] = useState(false);\r\n    const [parentComment, setParentComment] = useState(\"\");\r\n    const openSubCommentInput = (id) => {\r\n        setIsSubCommentInputOpen(true);\r\n        setParentComment(id);\r\n    };\r\n    const closeSubCommentInput = () => {\r\n        setIsSubCommentInputOpen(false);\r\n    };\r\n    const createTitleCallBack = (commentId, index) => {\r\n        const childrenList = commentsState.commentsList.filter(\r\n            (itemId) => commentsState[itemId].parent === commentId\r\n        );\r\n        const key = `0-${index}`;\r\n        return {\r\n            title: card(\r\n                commentsState[commentId].text,\r\n                openSubCommentInput,\r\n                commentsState[commentId]\r\n            ),\r\n            key: key,\r\n            icon: <CarryOutOutlined />,\r\n            children: (childrenList || []).map((commentId, index) =>\r\n                createTitleCallBack(commentId, `${[key]}-${index}`)\r\n            ),\r\n        };\r\n    };\r\n\r\n    const createTree = (state) => {\r\n        const filteredComments = state.commentsList.filter(\r\n            (commentId) => state[commentId].taskId === selectedTaskId\r\n        );\r\n        const filteredParentsComments = filteredComments.filter(\r\n            (commentId) => state[commentId].parent === \"\"\r\n        );\r\n        return filteredParentsComments.map((commentId, index) =>\r\n            createTitleCallBack(commentId, index)\r\n        );\r\n    };\r\n    let treeData;\r\n    commentsState.commentsList\r\n        ? (treeData = createTree(commentsState))\r\n        : (treeData = []);\r\n\r\n    return (\r\n        <>\r\n            <DirectoryTree\r\n                selectable={false}\r\n                height={\"70vh\"}\r\n                virtual={false}\r\n                showLine={true}\r\n                showIcon={false}\r\n                defaultExpandAll\r\n                treeData={treeData}\r\n            />\r\n            <SubCommentModal\r\n                parentComment={parentComment}\r\n                isSubCommentInputOpen={isSubCommentInputOpen}\r\n                closeSubCommentInput={closeSubCommentInput}\r\n            />\r\n        </>\r\n    );\r\n};\r\n","import { Modal, Button, Input, Form } from \"antd\";\r\nimport { CommentsList } from \"../comments_list/CommentsList\";\r\nimport FormItem from \"antd/es/form/FormItem\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport const CommentModal = ({\r\n    isCommentOpen,\r\n    closeComment,\r\n    selectedTaskId,\r\n}) => {\r\n    const addComment = useDispatch();\r\n    const layout = {\r\n        labelCol: { span: 10 },\r\n        wrapperCol: { span: 50 },\r\n    };\r\n\r\n    const [formCom] = Form.useForm();\r\n    const dispatchValueofForm = (values) => {\r\n        const commentText = values.comment.text;\r\n        if (commentText && selectedTaskId) {\r\n            addComment({\r\n                type: \"addComment\",\r\n                payload: {\r\n                    id: `com-${uuidv4()}`,\r\n                    text: commentText,\r\n                    parent: \"\",\r\n                    taskId: selectedTaskId,\r\n                },\r\n            });\r\n        }\r\n        formCom.resetFields();\r\n    };\r\n\r\n    return (\r\n        <Modal open={isCommentOpen} onOk={closeComment} onCancel={closeComment}>\r\n            <Form\r\n                preserve={false}\r\n                form={formCom}\r\n                {...layout}\r\n                name=\"comments\"\r\n                style={{ marginTop: \"2rem\" }}\r\n                onFinish={dispatchValueofForm}\r\n            >\r\n                <Form.Item\r\n                    name={[\"comment\", \"text\"]}\r\n                    rules={[{ required: true }]}\r\n                >\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n                <FormItem>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        добавить комментарий\r\n                    </Button>\r\n                </FormItem>\r\n            </Form>\r\n\r\n            <CommentsList selectedTaskId={selectedTaskId} />\r\n        </Modal>\r\n    );\r\n};\r\n","import { Content } from \"antd/es/layout/layout\";\r\nimport { Button } from \"antd\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport styles from \"./TaskPage.module.css\";\r\nimport { TasksContainer } from \"../../5_entities\";\r\nimport { TaskModal } from \"../../5_entities\";\r\nimport { useState, useRef } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { TaskDescriptionModal } from \"../../5_entities/taskDescription_modal/TaskDescriptionModal\";\r\nimport { RollbackOutlined } from \"@ant-design/icons\";\r\nimport { CommentModal } from \"../../5_entities/comment_modal/CommentModal\";\r\n\r\nconst TasksPage = () => {\r\n    const { projectName } = useParams();\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [taskDescriptionModalOpen, setTaskDescriptionModalOpen] =\r\n        useState(false);\r\n    const [commentOpen, setCommentOpen] = useState(false);\r\n    const [selectedTaskId, setSelectedTaskId] = useState(\"\");\r\n    const taskIdRef = useRef(0);\r\n\r\n    const chooseActiveTask = (value) => {\r\n        setSelectedTaskId(value);\r\n    };\r\n\r\n    const setClose = () => {\r\n        setModalOpen(false);\r\n    };\r\n    const closeComment = () => {\r\n        setCommentOpen(false);\r\n    };\r\n    const openComment = () => {\r\n        setCommentOpen(true);\r\n    };\r\n    const setCloseTaskDescriptionModal = () => {\r\n        setTaskDescriptionModalOpen(false);\r\n    };\r\n    const setOpenTaskDescriptionModal = (taskId) => {\r\n        taskIdRef.current = taskId;\r\n        setTaskDescriptionModalOpen(true);\r\n    };\r\n\r\n    return (\r\n        <Content\r\n            style={{\r\n                height: \"100%\",\r\n                minHeight: \"100%\",\r\n                width: \"100%\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\",\r\n                position: \"relative\",\r\n            }}\r\n        >\r\n            <Link to=\"/\">\r\n                <RollbackOutlined\r\n                    height={\"10em\"}\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        left: \"2.5rem\",\r\n                        top: \"2.5rem\",\r\n                        fontSize: \"200%\",\r\n                    }}\r\n                />\r\n            </Link>\r\n\r\n            <Button\r\n                onClick={() => setModalOpen(true)}\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                icon={<PlusOutlined />}\r\n                size=\"large\"\r\n                style={{\r\n                    marginTop: \"2rem\",\r\n                    boxShadow: \"0px 0px 20px 2px rgba(0, 0, 0, .35)\",\r\n                    backgroundColor: \"green\",\r\n                }}\r\n            ></Button>\r\n            <div className={styles[\"names-cont-tasks-column\"]}>\r\n                <span className={styles[\"name-tasks-column\"]}>Queue</span>\r\n                <span className={styles[\"name-tasks-column\"]}>Development</span>\r\n                <span className={styles[\"name-tasks-column\"]}>Done</span>\r\n            </div>\r\n            <TasksContainer\r\n                projectName={projectName}\r\n                setOpenTaskDescriptionModal={setOpenTaskDescriptionModal}\r\n            />\r\n            <TaskModal\r\n                isModalOpen={modalOpen}\r\n                close={setClose}\r\n                projectName={projectName}\r\n            />\r\n            <TaskDescriptionModal\r\n                isModalOpen={taskDescriptionModalOpen}\r\n                close={setCloseTaskDescriptionModal}\r\n                // setOpenTaskDescriptionModal={setOpenTaskDescriptionModal}\r\n                taskId={taskIdRef.current}\r\n                projectName={projectName}\r\n                openComment={openComment}\r\n                chooseActiveTask={chooseActiveTask}\r\n            />\r\n            <CommentModal\r\n                isCommentOpen={commentOpen}\r\n                closeComment={closeComment}\r\n                openComment={openComment}\r\n                selectedTaskId={selectedTaskId}\r\n\r\n                // taskId={taskIdRef.current}\r\n            />\r\n        </Content>\r\n    );\r\n};\r\n\r\nexport default TasksPage;\r\n","import { Card } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const ProjectCard = ({ name, description, linkName }) => {\r\n    return (\r\n        <Link to={`/task/${linkName}`}>\r\n            <Card\r\n                hoverable={true}\r\n                title={name}\r\n                bordered={false}\r\n                style={{ width: 250 }}\r\n                bodyStyle={{\r\n                    display: \"flex\",\r\n                    overflow: \"hidden\",\r\n                    padding: \"1rem\",\r\n                    minHeight: \"8rem\",\r\n                    maxHeight: \"8rem\",\r\n                }}\r\n            >\r\n                <p\r\n                    style={{\r\n                        margin: \"0\",\r\n                        overflow: \"auto\",\r\n                        overflowWrap: \"break-word\",\r\n                    }}\r\n                >\r\n                    {description}\r\n                </p>\r\n            </Card>\r\n        </Link>\r\n    );\r\n};\r\n","import { Modal, Form, Input } from \"antd\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nexport const ProjectModal = ({ isModalOpen, close }) => {\r\n    const [form] = Form.useForm();\r\n    const addProject = useDispatch();\r\n    const addProjectTasks = useDispatch();\r\n\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n\r\n    /* eslint-disable no-template-curly-in-string */\r\n    const validateMessages = {\r\n        required: \"${label} is required!\",\r\n    };\r\n    /* eslint-enable no-template-curly-in-string */\r\n\r\n    const dispatchValuesHandler = (values) => {\r\n        const { project: { name = \"\", description = \"\" } = {} } = values;\r\n        addProject({\r\n            type: \"addProject\",\r\n            payload: {\r\n                projectName: name,\r\n                projectDescription: description,\r\n            },\r\n        });\r\n        addProjectTasks({\r\n            type: \"addProjectTasks\",\r\n            payload: {\r\n                projectName: name,\r\n            },\r\n        });\r\n        close();\r\n    };\r\n    const modalHandlerCancel = () => {\r\n        form.resetFields();\r\n        close();\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Добавление нового проекта\"\r\n            centered\r\n            open={isModalOpen}\r\n            onOk={form.submit}\r\n            onCancel={modalHandlerCancel}\r\n        >\r\n            <Form\r\n                preserve={false}\r\n                form={form}\r\n                {...layout}\r\n                name=\"project\"\r\n                style={{ maxWidth: 600 }}\r\n                validateMessages={validateMessages}\r\n                onFinish={dispatchValuesHandler}\r\n            >\r\n                <Form.Item\r\n                    name={[\"project\", \"name\"]}\r\n                    label=\"Название\"\r\n                    rules={[{ required: true }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name={[\"project\", \"description\"]}\r\n                    label=\"Краткое описание\"\r\n                >\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n            </Form>\r\n        </Modal>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"tasks-column-cont\":\"tasksContainer_tasks-column-cont__cQIDY\",\"task-column\":\"tasksContainer_task-column__-fdI0\"};","// extracted by mini-css-extract-plugin\nexport default {\"task-cont\":\"task_task-cont__PNZuU\",\"task-title\":\"task_task-title__KzE8K\",\"task-start\":\"task_task-start__VNPs3\"};","import styles from \"./task.module.css\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\n\r\nexport const Task = ({\r\n    id,\r\n    title,\r\n    start,\r\n    activeId,\r\n    priority,\r\n    endDate,\r\n    setOpenTaskDescriptionModal,\r\n}) => {\r\n    const { attributes, listeners, setNodeRef, transform, transition } =\r\n        useSortable({ id: id });\r\n\r\n    const style = {\r\n        transform: CSS.Transform.toString(transform),\r\n        transition,\r\n    };\r\n    const normDateOfStart = new Date(start).toLocaleString(\"ru\", {\r\n        day: \"numeric\",\r\n        month: \"numeric\",\r\n        year: \"numeric\",\r\n        hour: \"numeric\",\r\n        minute: \"numeric\",\r\n    });\r\n\r\n    let normDateofEnd;\r\n    if (!!endDate) {\r\n        normDateofEnd = new Date(endDate).toLocaleString(\"ru\", {\r\n            day: \"numeric\",\r\n            month: \"numeric\",\r\n            year: \"numeric\",\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n        });\r\n    }\r\n    const display = id === activeId ? true : false;\r\n    function setColor(priority) {\r\n        if (priority === 1) {\r\n            return \"rgb(211,254,171)\";\r\n        } else if (priority === 2) {\r\n            return \"rgb(248,251,167)\";\r\n        } else if (priority === 3) {\r\n            return \"rgb(235, 13, 13, 0.4)\";\r\n        } else {\r\n            return \"rgba(220, 216, 216, 0.6)\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{ touchAction: \"none\" }}>\r\n            <div\r\n                ref={setNodeRef}\r\n                style={style}\r\n                {...attributes}\r\n                {...listeners}\r\n                // hidden\r\n            >\r\n                <div\r\n                    onClick={setOpenTaskDescriptionModal}\r\n                    className={`${styles[\"task-cont\"]}`}\r\n                    hidden={display}\r\n                    style={{ backgroundColor: setColor(priority) }}\r\n                >\r\n                    <span className={styles[\"task-title\"]}>{title}</span>\r\n\r\n                    <span\r\n                        className={styles[\"task-start\"]}\r\n                    >{`начата: ${normDateOfStart}`}</span>\r\n                    <span className={styles[\"task-start\"]}>\r\n                        {!!endDate\r\n                            ? `завершена: ${normDateofEnd}`\r\n                            : `не завершена`}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    zIndex: \"1\",\r\n                    width: \"5rem\",\r\n                    background: \"grey\",\r\n                    height: \"1.4rem\",\r\n                    clipPath: \"polygon(0% 0%, 100% 0%, 70% 100%, 0% 100%)\",\r\n                    paddingLeft: \"0.2rem\",\r\n                    color: \"white\",\r\n                    cursor: \"pointer\",\r\n                }}\r\n                onClick={() => setOpenTaskDescriptionModal(id)}\r\n            >\r\n                открыть\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import styles from \"./tasksContainer.module.css\";\r\nimport { Task } from \"../task/Task\";\r\nimport { useState } from \"react\";\r\n\r\nimport { useSelector } from \"react-redux/es/hooks/useSelector\";\r\n\r\n// import { v4 as uuidv4 } from \"uuid\";\r\nimport {\r\n    DndContext,\r\n    closestCenter,\r\n    KeyboardSensor,\r\n    PointerSensor,\r\n    useSensor,\r\n    useSensors,\r\n    TouchSensor,\r\n    useDroppable,\r\n    DragOverlay,\r\n} from \"@dnd-kit/core\";\r\nimport {\r\n    arrayMove,\r\n    SortableContext,\r\n    sortableKeyboardCoordinates,\r\n    verticalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n// const idv4 = `item-${uuidv4()}`;\r\nconst getItemsState = (state) => state.reduserTascs;\r\n\r\nexport const TasksContainer = ({\r\n    projectName,\r\n    setOpenTaskDescriptionModal,\r\n}) => {\r\n    const itemsState = useSelector(getItemsState);\r\n    const items = itemsState[projectName];\r\n\r\n    const [activeId, setActiveId] = useState(null);\r\n\r\n    const updateTasks = useDispatch();\r\n\r\n    const sensors = useSensors(\r\n        useSensor(TouchSensor, {\r\n            // Press delay of 250ms, with tolerance of 5px of movement\r\n            activationConstraint: {\r\n                delay: 250,\r\n                tolerance: 5,\r\n            },\r\n        }),\r\n        useSensor(PointerSensor),\r\n        useSensor(KeyboardSensor, {\r\n            coordinateGetter: sortableKeyboardCoordinates,\r\n        })\r\n    );\r\n\r\n    function findNameOfColumn(nameOfTask) {\r\n        return items.tasks[nameOfTask].columnName;\r\n    }\r\n    function handleDragEnd(event) {\r\n        const { active, over } = event;\r\n\r\n        if (over.id === \"Quie\" || over.id === \"Develop\" || over.id === \"Done\") {\r\n            const newItems = JSON.parse(JSON.stringify(items));\r\n            const nameOfColumnForAdd = over.id;\r\n            const nameOfTask = active.id;\r\n            //удаление задачи из списка колонки\r\n            const nameOfColumnForDelete = findNameOfColumn(nameOfTask);\r\n            newItems.columns[nameOfColumnForDelete].tasks = newItems.columns[\r\n                nameOfColumnForDelete\r\n            ].tasks.filter((name) => name !== nameOfTask);\r\n            //добавление задачи в список колонки\r\n            newItems.columns[nameOfColumnForAdd].tasks.push(nameOfTask);\r\n            //изменяем поле columnName у задачи на новое\r\n            newItems.tasks[nameOfTask].columnName = nameOfColumnForAdd;\r\n            // устанавливаем время завершения\r\n            if (nameOfColumnForAdd === \"Done\") {\r\n                newItems.tasks[nameOfTask].endDate = new Date();\r\n            } else {\r\n                newItems.tasks[nameOfTask].endDate = \"\";\r\n            }\r\n            updateTasks({\r\n                type: \"updateTasks\",\r\n                payload: {\r\n                    projectName,\r\n                    newItems,\r\n                },\r\n            });\r\n\r\n            return;\r\n        }\r\n        if (\r\n            over.id !== active.id &&\r\n            items.tasks[over.id].columnName !==\r\n                items.tasks[active.id].columnName\r\n        ) {\r\n            const newItems = JSON.parse(JSON.stringify(items));\r\n            const nameOfColumnForAdd = findNameOfColumn(over.id);\r\n            const nameOfTask = active.id;\r\n            //удаление задачи из списка колонки\r\n            const nameOfColumnForDelete = findNameOfColumn(nameOfTask);\r\n            newItems.columns[nameOfColumnForDelete].tasks = newItems.columns[\r\n                nameOfColumnForDelete\r\n            ].tasks.filter((name) => name !== nameOfTask);\r\n            //добавление задачи в список колонки\r\n            newItems.columns[nameOfColumnForAdd].tasks.push(nameOfTask);\r\n            //изменяем поле columnName у задачи на новое\r\n            newItems.tasks[nameOfTask].columnName = nameOfColumnForAdd;\r\n            updateTasks({\r\n                type: \"updateTasks\",\r\n                payload: {\r\n                    projectName,\r\n                    newItems,\r\n                },\r\n            });\r\n\r\n            return;\r\n        }\r\n        if (\r\n            over.id !== active.id &&\r\n            items.tasks[over.id].columnName ===\r\n                items.tasks[active.id].columnName\r\n        ) {\r\n            const newItems = JSON.parse(JSON.stringify(items));\r\n            const nameOfActiveTask = active.id;\r\n            const nameOfOverTask = over.id;\r\n            const nameOfColumn = findNameOfColumn(nameOfActiveTask);\r\n            const newIndex = newItems.columns[nameOfColumn].tasks.findIndex(\r\n                (value) => value === nameOfOverTask\r\n            );\r\n            const oldIndex = newItems.columns[nameOfColumn].tasks.findIndex(\r\n                (value) => value === nameOfActiveTask\r\n            );\r\n            const newTasks = arrayMove(\r\n                newItems.columns[nameOfColumn].tasks,\r\n                oldIndex,\r\n                newIndex\r\n            );\r\n            newItems.columns[nameOfColumn].tasks = newTasks;\r\n            updateTasks({\r\n                type: \"updateTasks\",\r\n                payload: {\r\n                    projectName,\r\n                    newItems,\r\n                },\r\n            });\r\n\r\n            return;\r\n        }\r\n    }\r\n    function handleDragStart(event) {\r\n        const { active } = event;\r\n        setActiveId(active.id);\r\n    }\r\n\r\n    function findTasksNamesofColumn(nameOfColumn) {\r\n        const listOfColumnTasks = items?.columns[nameOfColumn]?.tasks || [];\r\n        return listOfColumnTasks;\r\n    }\r\n\r\n    return (\r\n        <DndContext\r\n            sensors={sensors}\r\n            collisionDetection={closestCenter}\r\n            onDragEnd={handleDragEnd}\r\n            onDragStart={handleDragStart}\r\n            // onDragMove={handleDragMove}\r\n            // onDragOver={handleDragOver}\r\n        >\r\n            <div className={styles[\"tasks-column-cont\"]}>\r\n                <div className={styles[\"task-column\"]}>\r\n                    <SortableContext\r\n                        items={findTasksNamesofColumn(\"Quie\")}\r\n                        strategy={verticalListSortingStrategy}\r\n                    >\r\n                        <Droppable id={\"Quie\"}>\r\n                            {findTasksNamesofColumn(\"Quie\").map((name) => (\r\n                                <Task\r\n                                    key={items.tasks[name].id}\r\n                                    id={items.tasks[name].id}\r\n                                    title={items.tasks[name].taskTitle}\r\n                                    start={items.tasks[name].startDate}\r\n                                    activeId={activeId}\r\n                                    priority={items.tasks[name].priority}\r\n                                    endDate={items.tasks[name].endDate}\r\n                                    setOpenTaskDescriptionModal={\r\n                                        setOpenTaskDescriptionModal\r\n                                    }\r\n                                />\r\n                            ))}\r\n                        </Droppable>\r\n                    </SortableContext>\r\n                </div>\r\n                <div className={styles[\"task-column\"]}>\r\n                    <SortableContext\r\n                        items={findTasksNamesofColumn(\"Develop\")}\r\n                        strategy={verticalListSortingStrategy}\r\n                    >\r\n                        <Droppable id={\"Develop\"}>\r\n                            {findTasksNamesofColumn(\"Develop\").map((name) => (\r\n                                <Task\r\n                                    key={items.tasks[name].id}\r\n                                    id={items.tasks[name].id}\r\n                                    title={items.tasks[name].taskTitle}\r\n                                    start={items.tasks[name].startDate}\r\n                                    activeId={activeId}\r\n                                    priority={items.tasks[name].priority}\r\n                                    endDate={items.tasks[name].endDate}\r\n                                    setOpenTaskDescriptionModal={\r\n                                        setOpenTaskDescriptionModal\r\n                                    }\r\n                                />\r\n                            ))}\r\n                        </Droppable>\r\n                    </SortableContext>\r\n                </div>\r\n                <div className={styles[\"task-column\"]}>\r\n                    <SortableContext\r\n                        items={findTasksNamesofColumn(\"Done\")}\r\n                        strategy={verticalListSortingStrategy}\r\n                    >\r\n                        <Droppable id={\"Done\"}>\r\n                            {findTasksNamesofColumn(\"Done\").map((name) => (\r\n                                <Task\r\n                                    key={items.tasks[name].id}\r\n                                    id={items.tasks[name].id}\r\n                                    title={items.tasks[name].taskTitle}\r\n                                    start={items.tasks[name].startDate}\r\n                                    activeId={activeId}\r\n                                    priority={items.tasks[name].priority}\r\n                                    endDate={items.tasks[name].endDate}\r\n                                    setOpenTaskDescriptionModal={\r\n                                        setOpenTaskDescriptionModal\r\n                                    }\r\n                                />\r\n                            ))}\r\n                        </Droppable>\r\n                    </SortableContext>\r\n                    <DragOverlay>\r\n                        {activeId ? (\r\n                            <Task\r\n                                id={activeId}\r\n                                title={items.tasks[activeId].title}\r\n                                start={items.tasks[activeId].start}\r\n                            />\r\n                        ) : null}\r\n                    </DragOverlay>\r\n                </div>\r\n            </div>\r\n        </DndContext>\r\n    );\r\n};\r\n\r\nfunction Droppable({ id, children }) {\r\n    const { setNodeRef } = useDroppable({\r\n        id: id,\r\n    });\r\n\r\n    return <div ref={setNodeRef}>{children}</div>;\r\n}\r\n","import { Modal, Form, Input, Radio, Button, message, Upload } from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport const TaskModal = ({ isModalOpen, close, projectName }) => {\r\n    const [form] = Form.useForm();\r\n    const [value, setValue] = useState(1);\r\n\r\n    const onChangeRadio = (event) => {\r\n        setValue(event.target.value);\r\n    };\r\n\r\n    const addTask = useDispatch();\r\n\r\n    // ************************************************* filepicker\r\n    const property = {\r\n        name: \"file\",\r\n        action: \"https://run.mocky.io/v3/435e224c-44fb-4773-9faf-380c5e6a2188\",\r\n        headers: {\r\n            authorization: \"authorization-text\",\r\n        },\r\n        onChange(info) {\r\n            if (info.file.status !== \"uploading\") {\r\n                console.log(info.file, info.fileList);\r\n            }\r\n            if (info.file.status === \"done\") {\r\n                message.success(`${info.file.name} file uploaded successfully`);\r\n            } else if (info.file.status === \"error\") {\r\n                message.error(`${info.file.name} file upload failed.`);\r\n            }\r\n        },\r\n    };\r\n    // *************************************************\r\n\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n\r\n    /* eslint-disable no-template-curly-in-string */\r\n    const validateMessages = {\r\n        required: \"${label} is required!\",\r\n        types: {\r\n            email: \"${label} is not a valid email!\",\r\n            number: \"${label} is not a valid number!\",\r\n        },\r\n        number: {\r\n            range: \"${label} must be between ${min} and ${max}\",\r\n        },\r\n    };\r\n    /* eslint-enable no-template-curly-in-string */\r\n\r\n    const modalHandlerCancel = () => {\r\n        form.resetFields();\r\n        setValue(1);\r\n        close();\r\n    };\r\n    const dispatchValuesHandler = (values) => {\r\n        const { task: { name = \"\", description = \"\" } = {} } = values;\r\n\r\n        addTask({\r\n            type: \"addTask\",\r\n            payload: {\r\n                projectName,\r\n                taskName: `task-${uuidv4()}`,\r\n                taskTitle: name,\r\n                taskDescription: description,\r\n                startDate: new Date(),\r\n                priority: value || 1,\r\n                endDate: \"\",\r\n                duration: \"\",\r\n                subTask: {},\r\n                files: {},\r\n                comments: {},\r\n            },\r\n        });\r\n\r\n        close();\r\n        form.resetFields();\r\n        setValue(1);\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Добавление новой задачи\"\r\n            centered\r\n            open={isModalOpen}\r\n            onOk={form.submit}\r\n            // onOk={modalHandlerOk}\r\n            onCancel={modalHandlerCancel}\r\n        >\r\n            <Form\r\n                preserve={false}\r\n                form={form}\r\n                {...layout}\r\n                name=\"task\"\r\n                style={{ maxWidth: 600 }}\r\n                validateMessages={validateMessages}\r\n                onFinish={dispatchValuesHandler}\r\n            >\r\n                <Form.Item\r\n                    name={[\"task\", \"name\"]}\r\n                    label=\"Название\"\r\n                    rules={[{ required: true }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={[\"task\", \"description\"]} label=\"Описание\">\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <div style={{ margin: \"1rem\" }}>\r\n                        <span style={{ margin: \"1rem\" }}>приоритет: </span>\r\n                        <Radio.Group\r\n                            onChange={onChangeRadio}\r\n                            name=\"radiogroup\"\r\n                            value={value}\r\n                        >\r\n                            <Radio value={1}>низкий</Radio>\r\n                            <Radio value={2}>средний</Radio>\r\n                            <Radio value={3}>высокий</Radio>\r\n                        </Radio.Group>\r\n                    </div>\r\n                </Form.Item>\r\n\r\n                <Upload {...property}>\r\n                    <Button icon={<UploadOutlined />}>Click to Upload</Button>\r\n                </Upload>\r\n            </Form>\r\n        </Modal>\r\n    );\r\n};\r\n"],"names":["getItemsState","state","reduserTascs","TaskDescriptionModal","_ref","isModalOpen","close","taskId","projectName","openComment","chooseActiveTask","tasksState","useSelector","_useState","useState","_useState2","_slicedToArray","durationDate","setDurationDate","useLayoutEffect","normStartDate","normEndDate","priority","taskTitle","startDate","endDate","priorityText","columnName","getDuration","a","moment","b","Date","now","days","diff","add","hours","minutes","seconds","concat","tasks","toLocaleString","day","month","year","hour","minute","useEffect","dur","timer","setTimeout","clearTimeout","items","key","label","children","_jsx","Badge","status","text","_jsxs","Modal","title","taskDescription","centered","open","onOk","onCancel","Descriptions","bordered","column","size","Button","CommentOutlined","onClick","color","style","fontSize","marginTop","marginLeft","cursor","SubCommentModal","closeSubCommentInput","isSubCommentInputOpen","parentComment","addComment","useDispatch","_Form$useForm","Form","useForm","formSubCom","_objectSpread","preserve","form","labelCol","span","wrapperCol","name","onFinish","values","commentText","comment","parentCommentId","id","type","payload","uuidv4","parent","resetFields","Item","rules","required","Input","TextArea","FormItem","htmlType","DirectoryTree","Tree","getCommentsState","reduserComments","CommentsList","treeData","selectedTaskId","commentsState","setIsSubCommentInputOpen","_useState3","_useState4","setParentComment","openSubCommentInput","createTitleCallBack","commentId","index","openSubComment","childrenList","commentsList","filter","itemId","Card","width","bodyStyle","display","overflow","padding","margin","overflowWrap","icon","CarryOutOutlined","map","_Fragment","selectable","height","virtual","showLine","showIcon","defaultExpandAll","CommentModal","isCommentOpen","closeComment","formCom","useParams","modalOpen","setModalOpen","taskDescriptionModalOpen","setTaskDescriptionModalOpen","_useState5","_useState6","commentOpen","setCommentOpen","_useState7","_useState8","setSelectedTaskId","taskIdRef","useRef","Content","minHeight","flexDirection","alignItems","position","Link","to","RollbackOutlined","left","top","shape","PlusOutlined","boxShadow","backgroundColor","className","styles","TasksContainer","setOpenTaskDescriptionModal","current","TaskModal","value","ProjectCard","description","linkName","hoverable","maxHeight","ProjectModal","addProject","addProjectTasks","submit","maxWidth","validateMessages","_values$project","project","_values$project2","_values$project2$name","_values$project2$desc","projectDescription","Task","normDateofEnd","start","activeId","_useSortable","useSortable","attributes","listeners","setNodeRef","transform","transition","CSS","Transform","toString","normDateOfStart","touchAction","ref","hidden","setColor","zIndex","background","clipPath","paddingLeft","setActiveId","updateTasks","sensors","useSensors","useSensor","TouchSensor","activationConstraint","delay","tolerance","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","findNameOfColumn","nameOfTask","findTasksNamesofColumn","nameOfColumn","_items$columns$nameOf","columns","DndContext","collisionDetection","closestCenter","onDragEnd","event","active","over","newItems","JSON","parse","stringify","nameOfColumnForAdd","nameOfColumnForDelete","push","nameOfActiveTask","nameOfOverTask","newIndex","findIndex","oldIndex","newTasks","arrayMove","onDragStart","SortableContext","strategy","verticalListSortingStrategy","Droppable","DragOverlay","_ref2","useDroppable","setValue","addTask","property","action","headers","authorization","onChange","info","file","console","log","fileList","message","success","error","types","email","number","range","_values$task","task","_values$task2","_values$task2$name","_values$task2$descrip","taskName","duration","subTask","files","comments","Radio","target","Upload","UploadOutlined"],"sourceRoot":""}