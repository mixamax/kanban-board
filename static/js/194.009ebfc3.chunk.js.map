{"version":3,"file":"static/js/194.009ebfc3.chunk.js","mappings":"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","sources":["../node_modules/antd/es/_util/gapSize.js","../node_modules/antd/es/space/context.js","../node_modules/antd/es/space/Item.js","../node_modules/antd/es/space/index.js","2_pages/projects_page/ProjectsPage.jsx","5_entities/project_card/ProjectCard.js","5_entities/project_modal/ProjectModal.js","webpack://project_planner/./src/5_entities/tasks_container/tasksContainer.module.css?f61e","webpack://project_planner/./src/5_entities/task/task.module.css?4989","5_entities/task/Task.jsx","5_entities/tasks_container/TasksContainer.jsx","5_entities/task_modal/TaskModal.jsx"],"sourcesContent":["export function isPresetSize(size) {\n  return ['small', 'middle', 'large'].includes(size);\n}\nexport function isValidGapNumber(size) {\n  if (!size) {\n    // The case of size = 0 is deliberately excluded here, because the default value of the gap attribute in CSS is 0, so if the user passes 0 in, we can directly ignore it.\n    return false;\n  }\n  return typeof size === 'number' && !Number.isNaN(size);\n}","import React from 'react';\nexport const SpaceContext = /*#__PURE__*/React.createContext({\n  latestIndex: 0\n});\nexport const SpaceContextProvider = SpaceContext.Provider;","\"use client\";\n\nimport * as React from 'react';\nimport { SpaceContext } from './context';\nconst Item = _ref => {\n  let {\n    className,\n    index,\n    children,\n    split,\n    style\n  } = _ref;\n  const {\n    latestIndex\n  } = React.useContext(SpaceContext);\n  if (children === null || children === undefined) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    style: style\n  }, children), index < latestIndex && split && /*#__PURE__*/React.createElement(\"span\", {\n    className: `${className}-split`\n  }, split));\n};\nexport default Item;","\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport { isPresetSize, isValidGapNumber } from '../_util/gapSize';\nimport { ConfigContext } from '../config-provider';\nimport Compact from './Compact';\nimport { SpaceContextProvider } from './context';\nimport Item from './Item';\nimport useStyle from './style';\nexport { SpaceContext } from './context';\nconst Space = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var _a, _b;\n  const {\n    getPrefixCls,\n    space,\n    direction: directionConfig\n  } = React.useContext(ConfigContext);\n  const {\n      size = (space === null || space === void 0 ? void 0 : space.size) || 'small',\n      align,\n      className,\n      rootClassName,\n      children,\n      direction = 'horizontal',\n      prefixCls: customizePrefixCls,\n      split,\n      style,\n      wrap = false,\n      classNames: customClassNames,\n      styles\n    } = props,\n    otherProps = __rest(props, [\"size\", \"align\", \"className\", \"rootClassName\", \"children\", \"direction\", \"prefixCls\", \"split\", \"style\", \"wrap\", \"classNames\", \"styles\"]);\n  const [horizontalSize, verticalSize] = Array.isArray(size) ? size : [size, size];\n  const isPresetVerticalSize = isPresetSize(verticalSize);\n  const isPresetHorizontalSize = isPresetSize(horizontalSize);\n  const isValidVerticalSize = isValidGapNumber(verticalSize);\n  const isValidHorizontalSize = isValidGapNumber(horizontalSize);\n  const childNodes = toArray(children, {\n    keepEmpty: true\n  });\n  const mergedAlign = align === undefined && direction === 'horizontal' ? 'center' : align;\n  const prefixCls = getPrefixCls('space', customizePrefixCls);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const cls = classNames(prefixCls, space === null || space === void 0 ? void 0 : space.className, hashId, `${prefixCls}-${direction}`, {\n    [`${prefixCls}-rtl`]: directionConfig === 'rtl',\n    [`${prefixCls}-align-${mergedAlign}`]: mergedAlign,\n    [`${prefixCls}-gap-row-${verticalSize}`]: isPresetVerticalSize,\n    [`${prefixCls}-gap-col-${horizontalSize}`]: isPresetHorizontalSize\n  }, className, rootClassName);\n  const itemClassName = classNames(`${prefixCls}-item`, (_a = customClassNames === null || customClassNames === void 0 ? void 0 : customClassNames.item) !== null && _a !== void 0 ? _a : (_b = space === null || space === void 0 ? void 0 : space.classNames) === null || _b === void 0 ? void 0 : _b.item);\n  // Calculate latest one\n  let latestIndex = 0;\n  const nodes = childNodes.map((child, i) => {\n    var _a, _b;\n    if (child !== null && child !== undefined) {\n      latestIndex = i;\n    }\n    const key = child && child.key || `${itemClassName}-${i}`;\n    return /*#__PURE__*/React.createElement(Item, {\n      className: itemClassName,\n      key: key,\n      index: i,\n      split: split,\n      style: (_a = styles === null || styles === void 0 ? void 0 : styles.item) !== null && _a !== void 0 ? _a : (_b = space === null || space === void 0 ? void 0 : space.styles) === null || _b === void 0 ? void 0 : _b.item\n    }, child);\n  });\n  const spaceContext = React.useMemo(() => ({\n    latestIndex\n  }), [latestIndex]);\n  // =========================== Render ===========================\n  if (childNodes.length === 0) {\n    return null;\n  }\n  const gapStyle = {};\n  if (wrap) {\n    gapStyle.flexWrap = 'wrap';\n  }\n  if (!isPresetHorizontalSize && isValidHorizontalSize) {\n    gapStyle.columnGap = horizontalSize;\n  }\n  if (!isPresetVerticalSize && isValidVerticalSize) {\n    gapStyle.rowGap = verticalSize;\n  }\n  return wrapSSR( /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    ref: ref,\n    className: cls,\n    style: Object.assign(Object.assign(Object.assign({}, gapStyle), space === null || space === void 0 ? void 0 : space.style), style)\n  }, otherProps), /*#__PURE__*/React.createElement(SpaceContextProvider, {\n    value: spaceContext\n  }, nodes)));\n});\nif (process.env.NODE_ENV !== 'production') {\n  Space.displayName = 'Space';\n}\nconst CompoundedSpace = Space;\nCompoundedSpace.Compact = Compact;\nexport default CompoundedSpace;","import { Layout, Button, Space } from \"antd\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport { useState } from \"react\";\r\nimport { ProjectCard, ProjectModal } from \"../../5_entities\";\r\nimport { useSelector } from \"react-redux/es/hooks/useSelector\";\r\n\r\nconst ProjectsPage = () => {\r\n    const { Content } = Layout;\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const projects = useSelector((state) => state.reduserProjects);\r\n\r\n    const setClose = () => {\r\n        setModalOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Content\r\n            style={{\r\n                minHeight: \"100%\",\r\n                width: \"100%\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\",\r\n            }}\r\n        >\r\n            <Button\r\n                onClick={() => setModalOpen(true)}\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                icon={<PlusOutlined />}\r\n                size=\"large\"\r\n                style={{\r\n                    marginTop: \"2rem\",\r\n                    boxShadow: \"0px 0px 20px 2px rgba(0, 0, 0, .35)\",\r\n                    backgroundColor: \"green\",\r\n                }}\r\n            ></Button>\r\n            <Space\r\n                size={\"large\"}\r\n                align={\"start\"}\r\n                wrap={true}\r\n                style={{\r\n                    minHeight: \"80%\",\r\n                    minWidth: \"95%\",\r\n                    maxWidth: \"95%\",\r\n                    marginTop: \"2rem\",\r\n                    border: \"solid 1px rgba(255, 255, 255, 1)\",\r\n                    borderRadius: \"10px\",\r\n                    padding: \"1rem\",\r\n                    flexGrow: \"1\",\r\n                    overflowY: \"auto\",\r\n                }}\r\n            >\r\n                {projects.ids.map((item) => (\r\n                    <ProjectCard\r\n                        key={item}\r\n                        linkName={item}\r\n                        name={projects.entities[item].name}\r\n                        description={projects.entities[item].description}\r\n                    />\r\n                ))}\r\n\r\n                <ProjectModal isModalOpen={modalOpen} close={setClose} />\r\n            </Space>\r\n        </Content>\r\n\r\n        //     </Layout>\r\n    );\r\n};\r\nexport default ProjectsPage;\r\n","import { Card } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const ProjectCard = ({ name, description, linkName }) => {\r\n    return (\r\n        <Link to={`/task/${linkName}`}>\r\n            <Card\r\n                hoverable={true}\r\n                title={name}\r\n                bordered={false}\r\n                style={{ width: 250 }}\r\n                bodyStyle={{\r\n                    display: \"flex\",\r\n                    overflow: \"hidden\",\r\n                    padding: \"1rem\",\r\n                    minHeight: \"8rem\",\r\n                    maxHeight: \"8rem\",\r\n                }}\r\n            >\r\n                <p\r\n                    style={{\r\n                        margin: \"0\",\r\n                        overflow: \"auto\",\r\n                        overflowWrap: \"break-word\",\r\n                    }}\r\n                >\r\n                    {description}\r\n                </p>\r\n            </Card>\r\n        </Link>\r\n    );\r\n};\r\n","import { Modal, Form, Input } from \"antd\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nexport const ProjectModal = ({ isModalOpen, close }) => {\r\n    const [form] = Form.useForm();\r\n    const addProject = useDispatch();\r\n    const addProjectTasks = useDispatch();\r\n\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n\r\n    /* eslint-disable no-template-curly-in-string */\r\n    const validateMessages = {\r\n        required: \"${label} is required!\",\r\n    };\r\n    /* eslint-enable no-template-curly-in-string */\r\n\r\n    const dispatchValuesHandler = (values) => {\r\n        const { project: { name = \"\", description = \"\" } = {} } = values;\r\n        addProject({\r\n            type: \"addProject\",\r\n            payload: {\r\n                projectName: name,\r\n                projectDescription: description,\r\n            },\r\n        });\r\n        addProjectTasks({\r\n            type: \"addProjectTasks\",\r\n            payload: {\r\n                projectName: name,\r\n            },\r\n        });\r\n        close();\r\n    };\r\n    const modalHandlerCancel = () => {\r\n        form.resetFields();\r\n        close();\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Добавление нового проекта\"\r\n            centered\r\n            open={isModalOpen}\r\n            onOk={form.submit}\r\n            onCancel={modalHandlerCancel}\r\n        >\r\n            <Form\r\n                preserve={false}\r\n                form={form}\r\n                {...layout}\r\n                name=\"project\"\r\n                style={{ maxWidth: 600 }}\r\n                validateMessages={validateMessages}\r\n                onFinish={dispatchValuesHandler}\r\n            >\r\n                <Form.Item\r\n                    name={[\"project\", \"name\"]}\r\n                    label=\"Название\"\r\n                    rules={[{ required: true }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    name={[\"project\", \"description\"]}\r\n                    label=\"Краткое описание\"\r\n                >\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n            </Form>\r\n        </Modal>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"tasks-column-cont\":\"tasksContainer_tasks-column-cont__cQIDY\",\"task-column\":\"tasksContainer_task-column__-fdI0\"};","// extracted by mini-css-extract-plugin\nexport default {\"task-cont\":\"task_task-cont__PNZuU\",\"task-title\":\"task_task-title__KzE8K\",\"task-start\":\"task_task-start__VNPs3\"};","import styles from \"./task.module.css\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\n\r\nexport const Task = ({\r\n    id,\r\n    title,\r\n    start,\r\n    activeId,\r\n    priority,\r\n    endDate,\r\n    setOpenTaskDescriptionModal,\r\n}) => {\r\n    const { attributes, listeners, setNodeRef, transform, transition } =\r\n        useSortable({ id: id });\r\n\r\n    const style = {\r\n        transform: CSS.Transform.toString(transform),\r\n        transition,\r\n    };\r\n    const normDateOfStart = new Date(start).toLocaleString(\"ru\", {\r\n        day: \"numeric\",\r\n        month: \"numeric\",\r\n        year: \"numeric\",\r\n        hour: \"numeric\",\r\n        minute: \"numeric\",\r\n    });\r\n\r\n    let normDateofEnd;\r\n    if (!!endDate) {\r\n        normDateofEnd = new Date(endDate).toLocaleString(\"ru\", {\r\n            day: \"numeric\",\r\n            month: \"numeric\",\r\n            year: \"numeric\",\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n        });\r\n    }\r\n    const display = id === activeId ? true : false;\r\n    function setColor(priority) {\r\n        if (priority === 1) {\r\n            return \"rgb(211,254,171)\";\r\n        } else if (priority === 2) {\r\n            return \"rgb(248,251,167)\";\r\n        } else if (priority === 3) {\r\n            return \"rgb(235, 13, 13, 0.4)\";\r\n        } else {\r\n            return \"rgba(220, 216, 216, 0.6)\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div\r\n                ref={setNodeRef}\r\n                style={style}\r\n                {...attributes}\r\n                {...listeners}\r\n                // hidden\r\n            >\r\n                <div\r\n                    onClick={setOpenTaskDescriptionModal}\r\n                    className={`${styles[\"task-cont\"]}`}\r\n                    hidden={display}\r\n                    style={{ backgroundColor: setColor(priority) }}\r\n                >\r\n                    <span className={styles[\"task-title\"]}>{title}</span>\r\n\r\n                    <span\r\n                        className={styles[\"task-start\"]}\r\n                    >{`начата: ${normDateOfStart}`}</span>\r\n                    <span className={styles[\"task-start\"]}>\r\n                        {!!endDate\r\n                            ? `завершена: ${normDateofEnd}`\r\n                            : `не завершена`}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div\r\n                style={{\r\n                    zIndex: \"1\",\r\n                    width: \"5rem\",\r\n                    background: \"grey\",\r\n                    height: \"1.4rem\",\r\n                    clipPath: \"polygon(0% 0%, 100% 0%, 70% 100%, 0% 100%)\",\r\n                    paddingLeft: \"0.2rem\",\r\n                    color: \"white\",\r\n                    cursor: \"pointer\",\r\n                }}\r\n                onClick={() => setOpenTaskDescriptionModal(id)}\r\n            >\r\n                открыть\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import styles from \"./tasksContainer.module.css\";\r\nimport { Task } from \"../task/Task\";\r\nimport { useState } from \"react\";\r\n\r\nimport { useSelector } from \"react-redux/es/hooks/useSelector\";\r\n\r\n// import { v4 as uuidv4 } from \"uuid\";\r\nimport {\r\n    DndContext,\r\n    closestCenter,\r\n    KeyboardSensor,\r\n    PointerSensor,\r\n    useSensor,\r\n    useSensors,\r\n    TouchSensor,\r\n    useDroppable,\r\n    DragOverlay,\r\n} from \"@dnd-kit/core\";\r\nimport {\r\n    arrayMove,\r\n    SortableContext,\r\n    sortableKeyboardCoordinates,\r\n    verticalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n// const idv4 = `item-${uuidv4()}`;\r\nconst getItemsState = (state) => state.reduserTascs;\r\n\r\nexport const TasksContainer = ({\r\n    projectName,\r\n    setOpenTaskDescriptionModal,\r\n}) => {\r\n    const itemsState = useSelector(getItemsState);\r\n    const items = itemsState[projectName];\r\n\r\n    const [activeId, setActiveId] = useState(null);\r\n\r\n    const updateTasks = useDispatch();\r\n\r\n    const sensors = useSensors(\r\n        useSensor(TouchSensor, {\r\n            // Press delay of 250ms, with tolerance of 5px of movement\r\n            activationConstraint: {\r\n                delay: 250,\r\n                tolerance: 5,\r\n            },\r\n        }),\r\n        useSensor(PointerSensor),\r\n        useSensor(KeyboardSensor, {\r\n            coordinateGetter: sortableKeyboardCoordinates,\r\n        })\r\n    );\r\n\r\n    function findNameOfColumn(nameOfTask) {\r\n        return items.tasks[nameOfTask].columnName;\r\n    }\r\n    function handleDragEnd(event) {\r\n        const { active, over } = event;\r\n\r\n        if (over.id === \"Quie\" || over.id === \"Develop\" || over.id === \"Done\") {\r\n            const newItems = JSON.parse(JSON.stringify(items));\r\n            const nameOfColumnForAdd = over.id;\r\n            const nameOfTask = active.id;\r\n            //удаление задачи из списка колонки\r\n            const nameOfColumnForDelete = findNameOfColumn(nameOfTask);\r\n            newItems.columns[nameOfColumnForDelete].tasks = newItems.columns[\r\n                nameOfColumnForDelete\r\n            ].tasks.filter((name) => name !== nameOfTask);\r\n            //добавление задачи в список колонки\r\n            newItems.columns[nameOfColumnForAdd].tasks.push(nameOfTask);\r\n            //изменяем поле columnName у задачи на новое\r\n            newItems.tasks[nameOfTask].columnName = nameOfColumnForAdd;\r\n            // устанавливаем время завершения\r\n            if (nameOfColumnForAdd === \"Done\") {\r\n                newItems.tasks[nameOfTask].endDate = new Date();\r\n            } else {\r\n                newItems.tasks[nameOfTask].endDate = \"\";\r\n            }\r\n            updateTasks({\r\n                type: \"updateTasks\",\r\n                payload: {\r\n                    projectName,\r\n                    newItems,\r\n                },\r\n            });\r\n\r\n            return;\r\n        }\r\n        if (\r\n            over.id !== active.id &&\r\n            items.tasks[over.id].columnName !==\r\n                items.tasks[active.id].columnName\r\n        ) {\r\n            const newItems = JSON.parse(JSON.stringify(items));\r\n            const nameOfColumnForAdd = findNameOfColumn(over.id);\r\n            const nameOfTask = active.id;\r\n            //удаление задачи из списка колонки\r\n            const nameOfColumnForDelete = findNameOfColumn(nameOfTask);\r\n            newItems.columns[nameOfColumnForDelete].tasks = newItems.columns[\r\n                nameOfColumnForDelete\r\n            ].tasks.filter((name) => name !== nameOfTask);\r\n            //добавление задачи в список колонки\r\n            newItems.columns[nameOfColumnForAdd].tasks.push(nameOfTask);\r\n            //изменяем поле columnName у задачи на новое\r\n            newItems.tasks[nameOfTask].columnName = nameOfColumnForAdd;\r\n            updateTasks({\r\n                type: \"updateTasks\",\r\n                payload: {\r\n                    projectName,\r\n                    newItems,\r\n                },\r\n            });\r\n\r\n            return;\r\n        }\r\n        if (\r\n            over.id !== active.id &&\r\n            items.tasks[over.id].columnName ===\r\n                items.tasks[active.id].columnName\r\n        ) {\r\n            const newItems = JSON.parse(JSON.stringify(items));\r\n            const nameOfActiveTask = active.id;\r\n            const nameOfOverTask = over.id;\r\n            const nameOfColumn = findNameOfColumn(nameOfActiveTask);\r\n            const newIndex = newItems.columns[nameOfColumn].tasks.findIndex(\r\n                (value) => value === nameOfOverTask\r\n            );\r\n            const oldIndex = newItems.columns[nameOfColumn].tasks.findIndex(\r\n                (value) => value === nameOfActiveTask\r\n            );\r\n            const newTasks = arrayMove(\r\n                newItems.columns[nameOfColumn].tasks,\r\n                oldIndex,\r\n                newIndex\r\n            );\r\n            newItems.columns[nameOfColumn].tasks = newTasks;\r\n            updateTasks({\r\n                type: \"updateTasks\",\r\n                payload: {\r\n                    projectName,\r\n                    newItems,\r\n                },\r\n            });\r\n\r\n            return;\r\n        }\r\n    }\r\n    function handleDragStart(event) {\r\n        const { active } = event;\r\n        setActiveId(active.id);\r\n    }\r\n\r\n    function findTasksNamesofColumn(nameOfColumn) {\r\n        const listOfColumnTasks = items?.columns[nameOfColumn]?.tasks || [];\r\n        return listOfColumnTasks;\r\n    }\r\n\r\n    return (\r\n        <DndContext\r\n            sensors={sensors}\r\n            collisionDetection={closestCenter}\r\n            onDragEnd={handleDragEnd}\r\n            onDragStart={handleDragStart}\r\n            // onDragMove={handleDragMove}\r\n            // onDragOver={handleDragOver}\r\n        >\r\n            <div className={styles[\"tasks-column-cont\"]}>\r\n                <div className={styles[\"task-column\"]}>\r\n                    <SortableContext\r\n                        items={findTasksNamesofColumn(\"Quie\")}\r\n                        strategy={verticalListSortingStrategy}\r\n                    >\r\n                        <Droppable id={\"Quie\"}>\r\n                            {findTasksNamesofColumn(\"Quie\").map((name) => (\r\n                                <Task\r\n                                    key={items.tasks[name].id}\r\n                                    id={items.tasks[name].id}\r\n                                    title={items.tasks[name].taskTitle}\r\n                                    start={items.tasks[name].startDate}\r\n                                    activeId={activeId}\r\n                                    priority={items.tasks[name].priority}\r\n                                    endDate={items.tasks[name].endDate}\r\n                                    setOpenTaskDescriptionModal={\r\n                                        setOpenTaskDescriptionModal\r\n                                    }\r\n                                />\r\n                            ))}\r\n                        </Droppable>\r\n                    </SortableContext>\r\n                </div>\r\n                <div className={styles[\"task-column\"]}>\r\n                    <SortableContext\r\n                        items={findTasksNamesofColumn(\"Develop\")}\r\n                        strategy={verticalListSortingStrategy}\r\n                    >\r\n                        <Droppable id={\"Develop\"}>\r\n                            {findTasksNamesofColumn(\"Develop\").map((name) => (\r\n                                <Task\r\n                                    key={items.tasks[name].id}\r\n                                    id={items.tasks[name].id}\r\n                                    title={items.tasks[name].taskTitle}\r\n                                    start={items.tasks[name].startDate}\r\n                                    activeId={activeId}\r\n                                    priority={items.tasks[name].priority}\r\n                                    endDate={items.tasks[name].endDate}\r\n                                    setOpenTaskDescriptionModal={\r\n                                        setOpenTaskDescriptionModal\r\n                                    }\r\n                                />\r\n                            ))}\r\n                        </Droppable>\r\n                    </SortableContext>\r\n                </div>\r\n                <div className={styles[\"task-column\"]}>\r\n                    <SortableContext\r\n                        items={findTasksNamesofColumn(\"Done\")}\r\n                        strategy={verticalListSortingStrategy}\r\n                    >\r\n                        <Droppable id={\"Done\"}>\r\n                            {findTasksNamesofColumn(\"Done\").map((name) => (\r\n                                <Task\r\n                                    key={items.tasks[name].id}\r\n                                    id={items.tasks[name].id}\r\n                                    title={items.tasks[name].taskTitle}\r\n                                    start={items.tasks[name].startDate}\r\n                                    activeId={activeId}\r\n                                    priority={items.tasks[name].priority}\r\n                                    endDate={items.tasks[name].endDate}\r\n                                    setOpenTaskDescriptionModal={\r\n                                        setOpenTaskDescriptionModal\r\n                                    }\r\n                                />\r\n                            ))}\r\n                        </Droppable>\r\n                    </SortableContext>\r\n                    <DragOverlay>\r\n                        {activeId ? (\r\n                            <Task\r\n                                id={activeId}\r\n                                title={items.tasks[activeId].title}\r\n                                start={items.tasks[activeId].start}\r\n                            />\r\n                        ) : null}\r\n                    </DragOverlay>\r\n                </div>\r\n            </div>\r\n        </DndContext>\r\n    );\r\n};\r\n\r\nfunction Droppable({ id, children }) {\r\n    const { setNodeRef } = useDroppable({\r\n        id: id,\r\n    });\r\n\r\n    return <div ref={setNodeRef}>{children}</div>;\r\n}\r\n","import { Modal, Form, Input, Radio, Button, message, Upload } from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport const TaskModal = ({ isModalOpen, close, projectName }) => {\r\n    const [form] = Form.useForm();\r\n    const [value, setValue] = useState(1);\r\n\r\n    const onChangeRadio = (event) => {\r\n        setValue(event.target.value);\r\n    };\r\n\r\n    const addTask = useDispatch();\r\n\r\n    // ************************************************* filepicker\r\n    const property = {\r\n        name: \"file\",\r\n        action: \"https://run.mocky.io/v3/435e224c-44fb-4773-9faf-380c5e6a2188\",\r\n        headers: {\r\n            authorization: \"authorization-text\",\r\n        },\r\n        onChange(info) {\r\n            if (info.file.status !== \"uploading\") {\r\n                console.log(info.file, info.fileList);\r\n            }\r\n            if (info.file.status === \"done\") {\r\n                message.success(`${info.file.name} file uploaded successfully`);\r\n            } else if (info.file.status === \"error\") {\r\n                message.error(`${info.file.name} file upload failed.`);\r\n            }\r\n        },\r\n    };\r\n    // *************************************************\r\n\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n\r\n    /* eslint-disable no-template-curly-in-string */\r\n    const validateMessages = {\r\n        required: \"${label} is required!\",\r\n        types: {\r\n            email: \"${label} is not a valid email!\",\r\n            number: \"${label} is not a valid number!\",\r\n        },\r\n        number: {\r\n            range: \"${label} must be between ${min} and ${max}\",\r\n        },\r\n    };\r\n    /* eslint-enable no-template-curly-in-string */\r\n\r\n    const modalHandlerCancel = () => {\r\n        form.resetFields();\r\n        setValue(1);\r\n        close();\r\n    };\r\n    const dispatchValuesHandler = (values) => {\r\n        const { task: { name = \"\", description = \"\" } = {} } = values;\r\n\r\n        addTask({\r\n            type: \"addTask\",\r\n            payload: {\r\n                projectName,\r\n                taskName: `task-${uuidv4()}`,\r\n                taskTitle: name,\r\n                taskDescription: description,\r\n                startDate: new Date(),\r\n                priority: value || 1,\r\n                endDate: \"\",\r\n                duration: \"\",\r\n                subTask: {},\r\n                files: {},\r\n                comments: {},\r\n            },\r\n        });\r\n\r\n        close();\r\n        form.resetFields();\r\n        setValue(1);\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Добавление новой задачи\"\r\n            centered\r\n            open={isModalOpen}\r\n            onOk={form.submit}\r\n            // onOk={modalHandlerOk}\r\n            onCancel={modalHandlerCancel}\r\n        >\r\n            <Form\r\n                preserve={false}\r\n                form={form}\r\n                {...layout}\r\n                name=\"task\"\r\n                style={{ maxWidth: 600 }}\r\n                validateMessages={validateMessages}\r\n                onFinish={dispatchValuesHandler}\r\n            >\r\n                <Form.Item\r\n                    name={[\"task\", \"name\"]}\r\n                    label=\"Название\"\r\n                    rules={[{ required: true }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name={[\"task\", \"description\"]} label=\"Описание\">\r\n                    <Input.TextArea />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <div style={{ margin: \"1rem\" }}>\r\n                        <span style={{ margin: \"1rem\" }}>приоритет: </span>\r\n                        <Radio.Group\r\n                            onChange={onChangeRadio}\r\n                            name=\"radiogroup\"\r\n                            value={value}\r\n                        >\r\n                            <Radio value={1}>низкий</Radio>\r\n                            <Radio value={2}>средний</Radio>\r\n                            <Radio value={3}>высокий</Radio>\r\n                        </Radio.Group>\r\n                    </div>\r\n                </Form.Item>\r\n\r\n                <Upload {...property}>\r\n                    <Button icon={<UploadOutlined />}>Click to Upload</Button>\r\n                </Upload>\r\n            </Form>\r\n        </Modal>\r\n    );\r\n};\r\n"],"names":["isPresetSize","size","includes","isValidGapNumber","Number","isNaN","SpaceContext","React","latestIndex","SpaceContextProvider","Provider","_ref","className","index","children","split","style","undefined","concat","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","Space","props","ref","_classNames","_a","_b","_React$useContext","ConfigContext","getPrefixCls","space","directionConfig","direction","_props$size","align","rootClassName","_props$direction","customizePrefixCls","prefixCls","_props$wrap","wrap","customClassNames","classNames","styles","otherProps","Array","isArray","_ref2","_slicedToArray","horizontalSize","verticalSize","isPresetVerticalSize","isPresetHorizontalSize","isValidVerticalSize","isValidHorizontalSize","childNodes","toArray","keepEmpty","mergedAlign","_useStyle","useStyle","_useStyle2","wrapSSR","hashId","cls","_defineProperty","itemClassName","item","nodes","map","child","key","Item","spaceContext","gapStyle","flexWrap","columnGap","rowGap","assign","value","CompoundedSpace","Compact","Content","Layout","_useState","useState","_useState2","modalOpen","setModalOpen","projects","useSelector","state","reduserProjects","_jsxs","minHeight","width","display","flexDirection","alignItems","_jsx","Button","onClick","type","shape","icon","PlusOutlined","marginTop","boxShadow","backgroundColor","minWidth","maxWidth","border","borderRadius","padding","flexGrow","overflowY","ids","ProjectCard","linkName","name","entities","description","ProjectModal","isModalOpen","close","Link","to","Card","hoverable","title","bordered","bodyStyle","overflow","maxHeight","margin","overflowWrap","_Form$useForm","Form","useForm","form","addProject","useDispatch","addProjectTasks","Modal","centered","open","onOk","submit","onCancel","resetFields","_objectSpread","preserve","labelCol","span","wrapperCol","validateMessages","required","onFinish","values","_values$project","project","_values$project2","_values$project2$name","_values$project2$desc","payload","projectName","projectDescription","label","rules","Input","TextArea","Task","normDateofEnd","id","start","activeId","priority","endDate","setOpenTaskDescriptionModal","_useSortable","useSortable","attributes","listeners","setNodeRef","transform","transition","CSS","Transform","toString","normDateOfStart","Date","toLocaleString","day","month","year","hour","minute","hidden","setColor","zIndex","background","height","clipPath","paddingLeft","color","cursor","getItemsState","reduserTascs","TasksContainer","items","setActiveId","updateTasks","sensors","useSensors","useSensor","TouchSensor","activationConstraint","delay","tolerance","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","findNameOfColumn","nameOfTask","tasks","columnName","findTasksNamesofColumn","nameOfColumn","_items$columns$nameOf","columns","DndContext","collisionDetection","closestCenter","onDragEnd","event","active","over","newItems","JSON","parse","stringify","nameOfColumnForAdd","nameOfColumnForDelete","filter","push","nameOfActiveTask","nameOfOverTask","newIndex","findIndex","oldIndex","newTasks","arrayMove","onDragStart","SortableContext","strategy","verticalListSortingStrategy","Droppable","taskTitle","startDate","DragOverlay","useDroppable","TaskModal","setValue","addTask","property","action","headers","authorization","onChange","info","file","status","console","log","fileList","message","success","error","types","email","number","range","_values$task","task","_values$task2","_values$task2$name","_values$task2$descrip","taskName","uuidv4","taskDescription","duration","subTask","files","comments","Radio","target","Upload","UploadOutlined"],"sourceRoot":""}